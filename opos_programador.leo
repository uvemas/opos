<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="vicent.20220314162548.1"><vh>Startup</vh>
<v t="vicent.20220314162548.2"><vh>@settings</vh>
<v t="vicent.20220314162548.3"><vh>@string target_language = rest</vh></v>
<v t="vicent.20220314162548.4"><vh>For rst3 command</vh>
<v t="vicent.20220314162548.5"><vh>@bool rst3_call_docutils = False</vh></v>
<v t="vicent.20220314162548.6"><vh>@bool rst3_write_intermediate_file = True</vh></v>
<v t="vicent.20220314162548.7"><vh>@string rst3_write_intermediate_extension = .txt</vh></v>
</v>
</v>
<v t="vicent.20220314162548.8"><vh>@button make-sphinx</vh></v>
</v>
<v t="vicent.20220331172223.1"><vh>Project configuration</vh>
<v t="vicent.20220331172223.2"><vh>@auto conf.py</vh></v>
<v t="vicent.20220331172223.3"><vh>@clean index.rst</vh></v>
</v>
<v t="vicent.20220401181802.1"><vh>Temas</vh>
<v t="vicent.20220831110352.1"><vh>TODO</vh></v>
<v t="vicent.20220528090703.1"><vh>Sistemas Operativos</vh>
<v t="vicent.20220528085051.1"><vh>Tema 1 Sistemas Operativos Windows</vh></v>
<v t="vicent.20220528085100.1"><vh>Tema 2 Sistemas Operativos Linux</vh></v>
<v t="vicent.20220528085120.1"><vh>Tema 3 Sistemas Operativos Android</vh></v>
</v>
<v t="vicent.20220528090721.1"><vh>Bases de datos</vh>
<v t="vicent.20220528085316.1"><vh>Tema 4 Sistemas de gestión de bases de datos. Bases de datos relacionales</vh></v>
<v t="vicent.20220528085607.1"><vh>Tema 10  Modelo conceptual de datos. Modelos Entidades-Relación. Diagramas de flujo de datos</vh></v>
<v t="vicent.20220528085631.1"><vh>Tema 11 Bases de datos relacionales. Fundamentos y reglas de normalización</vh></v>
<v t="vicent.20220528085656.1"><vh>Tema 12 Oracle. SQL. PL/SQL</vh></v>
</v>
<v t="vicent.20220528090846.1"><vh>Ofimática</vh>
<v t="vicent.20220528085448.1"><vh>Tema 8 Ofimática. LibreOffice Writer</vh></v>
<v t="vicent.20220528085500.1"><vh>Tema 9 Ofimática. LibreOffice Calc</vh></v>
</v>
<v t="vicent.20220528092009.1"><vh>Programación</vh>
<v t="vicent.20220507204235.1"><vh>@clean Tema 18 Disenyo Web.md</vh>
<v t="vicent.20220508085627.1"><vh>HTML5</vh>
<v t="vicent.20220508093555.1"><vh>Elementos</vh></v>
<v t="vicent.20220508092151.1"><vh>Layout</vh></v>
<v t="vicent.20220508100606.1"><vh>Hiperenlaces</vh></v>
<v t="vicent.20220508110654.1"><vh>Encoding</vh></v>
<v t="vicent.20220515124701.1"><vh>Tablas</vh></v>
</v>
<v t="vicent.20220508085634.1"><vh>CSS3</vh>
<v t="vicent.20220509194811.1"><vh>Selectores</vh>
<v t="vicent.20220509204654.1"><vh>Pseudoclases</vh></v>
</v>
<v t="vicent.20220509193310.1"><vh>La cascada</vh></v>
<v t="vicent.20220511184126.1"><vh>Box model</vh></v>
<v t="vicent.20220511200500.1"><vh>Layout</vh></v>
<v t="vicent.20220515095559.1"><vh>Flexbox</vh></v>
<v t="vicent.20220515095927.1"><vh>Grid layout</vh></v>
</v>
</v>
<v t="vicent.20220528091855.1"><vh>Programación Orientada a Objetos</vh>
<v t="vicent.20220528085742.1"><vh>@clean Tema 13 Programación orientada a objetos: Clases y Objetos.md</vh>
<v t="vicent.20220623195702.1"><vh>Top-level clases</vh></v>
<v t="vicent.20220623164829.1"><vh>Modificadores de acceso</vh></v>
<v t="vicent.20220623201230.1"><vh>Modificadores de no-acceso</vh></v>
<v t="vicent.20220801182538.1"><vh>Clases y objetos</vh></v>
</v>
<v t="vicent.20220528085821.1"><vh>@clean Tema 14 Programación orientada a objetos Herencia Polimorfismo.md</vh>
<v t="vicent.20220728104604.1"><vh>Clases abstractas</vh></v>
<v t="vicent.20220729110533.1"><vh>Interfaces</vh></v>
<v t="vicent.20220729085936.1"><vh>Clases abstractas vs Interfaces</vh></v>
<v t="vicent.20220729124948.1"><vh>Herencia de tipos</vh></v>
<v t="vicent.20220801184823.1"><vh>Herencia, composición y dependency injection</vh></v>
</v>
<v t="vicent.20220528085855.1"><vh>Tema 15 Análisis y diseño orientado a objetos usando UML</vh></v>
</v>
<v t="vicent.20220528092032.1"><vh>Java</vh>
<v t="vicent.20220528085918.1"><vh>@clean Tema 16 El entorno de desarrollo java Arquitectura J2EE.md</vh>
<v t="vicent.20220801204841.1"><vh>JVM, JRE y JDK</vh></v>
<v t="vicent.20220801211535.1"><vh>JEE</vh></v>
</v>
<v t="vicent.20220528085937.1"><vh>@clean Tema 17 Lenguaje de programacion Java.md</vh>
<v t="vicent.20220726085534.1"><vh>Get Started</vh></v>
<v t="vicent.20220725083209.1"><vh>Basic Syntax</vh></v>
<v t="vicent.20220725085429.1"><vh>Java primitives</vh></v>
<v t="vicent.20220831101942.1"><vh>String - bytes conversion</vh></v>
<v t="vicent.20220726084801.1"><vh>Java Inizialization</vh></v>
<v t="vicent.20220806092453.1"><vh>Overloading vs Overrriding</vh></v>
<v t="vicent.20220806115156.1"><vh>Modificador static</vh></v>
<v t="vicent.20220806180544.1"><vh>Modificador final</vh></v>
<v t="vicent.20220806180756.1"><vh>Enums</vh></v>
<v t="vicent.20220827084532.1"><vh>Streams</vh>
<v t="vicent.20220828080628.1"><vh>Pipeline</vh></v>
</v>
<v t="vicent.20220827121231.1"><vh>Collectors</vh></v>
<v t="vicent.20220830100950.1"><vh>Java IO: concepts</vh>
<v t="vicent.20220830111952.1"><vh>Buffering</vh></v>
</v>
<v t="vicent.20220829094958.1"><vh>Java IO: Consola</vh></v>
<v t="vicent.20220829114442.1"><vh>Java IO: files</vh></v>
</v>
<v t="vicent.20220528085957.1"><vh>Tema 19 JSF. Primefaces</vh></v>
<v t="vicent.20220528090351.1"><vh>Tema 27 JSP</vh></v>
<v t="vicent.20220528090458.1"><vh>@clean Tema 30 Metodos de prueba del Software Junit.md</vh>
<v t="vicent.20220613183309.1"><vh>Métodos de prueba</vh></v>
<v t="vicent.20220613173035.1"><vh>JUnit</vh></v>
</v>
</v>
<v t="vicent.20220528090343.1"><vh>Tema 26 PHP</vh></v>
<v t="vicent.20220528090410.1"><vh>Tema 28 Desarrollo de aplicaciones con Ajax y Jquery</vh></v>
</v>
<v t="vicent.20220528092851.1"><vh>Gestión del desarrollo</vh>
<v t="vicent.20220528090429.1"><vh>Tema 29 Metodologías Ágiles de desarrollo. Scrum</vh></v>
<v t="vicent.20220528090520.1"><vh>@clean Tema 31 Control de versiones Subversion GIT.md</vh>
<v t="vicent.20220901104803.1"><vh>GIT: conceptos básicos</vh></v>
<v t="vicent.20220902132213.1"><vh>Remotos</vh></v>
<v t="vicent.20220905143536.1"><vh>Fusión de ramas</vh></v>
<v t="vicent.20220902135651.1"><vh>Tags</vh></v>
<v t="vicent.20220906183732.1"><vh>Stash y bisect</vh></v>
</v>
<v t="vicent.20220528090539.1"><vh>@clean Tema 32 Gestion integrada del desarrollo Maven.md</vh>
<v t="vicent.20220615181441.1"><vh>Maven</vh>
<v t="vicent.20220618074740.1"><vh>Arquetipos</vh></v>
<v t="vicent.20220615191428.1"><vh>Guía rápida</vh></v>
<v t="vicent.20220615193810.1"><vh>Ciclo de vida del proyecto</vh></v>
</v>
</v>
</v>
<v t="vicent.20220910124036.1"><vh>Frameworks</vh>
<v t="vicent.20220910124547.1"><vh>@clean Tema 22 Arquitectura MVC.md</vh></v>
<v t="vicent.20220910124056.1"><vh>@clean Tema 24 Spring Boot.md</vh>
<v t="vicent.20220911110903.1"><vh>SpringBoot</vh></v>
<v t="vicent.20220911120722.1"><vh>Dependency injection and IoC</vh></v>
<v t="vicent.20220910203232.1"><vh>Crear un proyecto SpringBoot con VSCode</vh></v>
<v t="vicent.20220911103833.1"><vh>Desarrollo del proyecto</vh></v>
</v>
<v t="vicent.20220910124231.1"><vh>@clean Tema 23 MyBatis.md</vh></v>
<v t="vicent.20220910124337.1"><vh>@clean Tema 21 FreeMarker.md</vh></v>
<v t="vicent.20220910124126.1"><vh>@clean Tema 19 JSF y Primefaces.md</vh></v>
<v t="vicent.20220910124138.1"><vh>@clean Tema 20 Jasper Reports.md</vh></v>
</v>
<v t="vicent.20220528093019.1"><vh>Otros</vh>
<v t="vicent.20220409080546.1"><vh>@clean Tema 5 Arquitectura SOA.md</vh>
<v t="vicent.20220314162642.1"><vh>HTTP</vh>
<v t="vicent.20220330174620.1"><vh>Intro</vh></v>
<v t="vicent.20220330182427.1"><vh>Parámetros</vh></v>
<v t="vicent.20220314221255.1"><vh>Requests</vh>
<v t="vicent.20220407190238.1"><vh>Formato</vh></v>
<v t="vicent.20220405191838.1"><vh>Métodos</vh></v>
<v t="vicent.20220405193412.1"><vh>URI</vh></v>
<v t="vicent.20220405195812.1"><vh>Cabeceras</vh></v>
<v t="vicent.20220405201733.1"><vh>Ejemplos</vh></v>
</v>
<v t="vicent.20220314221307.1"><vh>Responses</vh>
<v t="vicent.20220407190134.1"><vh>Formato</vh></v>
<v t="vicent.20220406202039.1"><vh>Códigos de Estado</vh></v>
<v t="vicent.20220406202908.1"><vh>Cabeceras</vh></v>
<v t="vicent.20220406202935.1"><vh>Ejemplos</vh></v>
</v>
<v t="vicent.20220407190707.1"><vh>Methods</vh>
<v t="vicent.20220407193049.1"><vh>CONNECT</vh></v>
<v t="vicent.20220407192703.1"><vh>OPTIONS</vh></v>
<v t="vicent.20220407192824.1"><vh>TRACE</vh></v>
</v>
<v t="vicent.20220314221345.1"><vh>Headers</vh></v>
<v t="vicent.20220409074849.1"><vh>Caching</vh></v>
<v t="vicent.20220409074315.1"><vh>Seguridad</vh>
<v t="vicent.20220410085819.1"><vh>Personal Information Leaking</vh></v>
<v t="vicent.20220410091157.1"><vh>File and Path Names Based Attack</vh></v>
<v t="vicent.20220410091543.1"><vh>Spoofing</vh></v>
<v t="vicent.20220410092752.1"><vh>Authentication Credentials</vh></v>
<v t="vicent.20220410092836.1"><vh>Proxies</vh></v>
</v>
<v t="vicent.20220314221515.1"><vh>Examples</vh></v>
</v>
<v t="vicent.20220822180035.1"><vh>Nota</vh></v>
<v t="vicent.20220821093743.1"><vh>API</vh></v>
<v t="vicent.20220426184944.1"><vh>Arquitectura SOA</vh></v>
<v t="vicent.20220409074943.1"><vh>SOAP</vh>
<v t="vicent.20220410114347.1"><vh>Intro</vh></v>
<v t="vicent.20220410123954.1"><vh>Mensajes</vh></v>
<v t="vicent.20220422105901.1"><vh>Envelope</vh></v>
<v t="vicent.20220422130215.1"><vh>Cabecera</vh>
<v t="vicent.20220422222523.1"><vh>Atributos</vh></v>
</v>
<v t="vicent.20220422231148.1"><vh>Cuerpo</vh></v>
<v t="vicent.20220424113811.1"><vh>Fallo</vh></v>
<v t="vicent.20220424120616.1"><vh>Tipos de datos</vh></v>
<v t="vicent.20220424120628.1"><vh>Transporte</vh></v>
<v t="vicent.20220422230747.1"><vh>Ejemplos</vh>
<v t="vicent.20220424105914.1"><vh>Cabecera</vh></v>
<v t="vicent.20220424110027.1"><vh>Cuerpo</vh></v>
<v t="vicent.20220424125057.1"><vh>Completo</vh></v>
</v>
</v>
<v t="vicent.20220426185443.1"><vh>REST</vh></v>
<v t="vicent.20220426185448.1"><vh>JSON</vh></v>
</v>
</v>
</v>
<v t="vicent.20220514125127.1"><vh>CSS3 layout samples</vh>
<v t="vicent.20220514125209.1"><vh>@clean source.html</vh></v>
<v t="vicent.20220515105451.1"><vh>@clean sourceflexbox.html</vh></v>
<v t="vicent.20220514125215.1"><vh>@clean main.css</vh></v>
<v t="vicent.20220515083729.1"><vh>@clean main2.css</vh></v>
<v t="vicent.20220515105805.1"><vh>@clean main3.css</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="vicent.20220314162548.1">By convention, a Startup node contains settings, scripts, etc.
that mostly one wants to have hidden.
</t>
<t tx="vicent.20220314162548.2">**Important**: to take effect, all settings must be descendants of this
@settings node.

**Note**: This file colors text as reStructuredText by default because of
the setting::

    @string target_language = rest
</t>
<t tx="vicent.20220314162548.3">The default language if no @language or @comment is in effect.

Valid values are (case is ignored):

actionscript,c,csharp,css,cweb,elisp,html,java,latex,
pascal,perl,perlpod,php,plain,plsql,python,rapidq,rebol,shell,tcltk.</t>
<t tx="vicent.20220314162548.4"></t>
<t tx="vicent.20220314162548.5"># Use False when using Sphinx</t>
<t tx="vicent.20220314162548.6"></t>
<t tx="vicent.20220314162548.7"></t>
<t tx="vicent.20220314162548.8">@language python
import os
# Useful if we launch Leo from the console
trace = True
g.cls()
# Setup a complex command named make-sphinx
c.setComplexCommand('make-sphinx')
c.save()
# Call the rst3 command on the @rst node which is parent of the selected node
aList = c.rstCommands.rst3()
g.es(aList)
g.es('erewrf')
if aList is None:
#    path = g.os_path_finalize_join(g.app.loadDir,'..','doc','html')
#    os.chdir(path)
#    if len(aList) &gt; 1: g.execute_shell_commands('make clean',trace=trace)
    path = '.'
    # It's  crucial to change to the directory where the source file lives
    os.chdir(path)
    g.es('Current directory: ' + os.getcwd())
    g.execute_shell_commands('sphinx-build -M html . _build', trace=trace)
    # fn = aList[0].h.strip() if len(aList) == 1 else 'leo_toc.html'
    # fn = g.os_path_finalize_join(path,'_build','html',g.os_path_basename(fn))
    # if g.os_path_exists(fn):
        # # Don't wait for this command to exit!
        # g.execute_shell_commands(['&amp;%s' % (fn)],trace=trace)
</t>
<t tx="vicent.20220314162642.1">## El protocolo HTTP

</t>
<t tx="vicent.20220314221255.1">### Peticiones
</t>
<t tx="vicent.20220314221307.1">### Respuestas
</t>
<t tx="vicent.20220314221345.1">(Headers)=
### Headers

To Be Done</t>
<t tx="vicent.20220314221515.1"></t>
<t tx="vicent.20220330174620.1">### Intro

HTTP es un protocolo de la capa OSI de aplicación (conecta un cliente web con un servidor web) que se usa para 
intercambiar información entre sistemas conectados a una red. Es el fundamento de la WWW.

Es un protocolo de comunicación basado en TCP/IP (la información se envía a través de una conexión TCP/IP) que, por 
defecto, usa el puerto 80.

Es de propósito general y sus métodos de petición, parámetros y cabeceras se pueden extender.

Sus características básicas son:

- connectionless: cliente y servidor solo tienen constancia el uno del otro mientras dura la conexión (desde que el 
  cliente hace la petición al servidor hasta que recibe la respuesta)
- media independent: permite intercambiar cualquier tipo de información si ambos, cliente y servidor, saben manejarla y 
  especifican su tipo mediante un MIME-type
- stateless: ni el cliente ni el servidor conservan información de su estado al terminar una conexión

La arquitectura básica es de tipo cliente/servidor.

![Arquitectura HTTP](images/cgiarch.gif)

- cliente (navegador web, curl, wget, etc.): envía una petición al servidor con el formato:

  ~~~
  método + URI + protocol version
  [cabecera CRLF]*
  CRLF
  [cuerpo]
  ~~~

- servidor (apache2, IIS, nginx, etc.): responde con una línea de estado seguida de un MIME-like message

  ~~~
  protocol version + success/error code
  [cabecera CRLF]*
  CRLF
  [cuerpo]
  ~~~

  Las cabeceras pueden ser generales (aplicables a las peticiones y a las respuestas), de petición, de respuesta y de 
  entidad (contienen información acerca del cuerpo o de la URI de la petición)</t>
<t tx="vicent.20220330182427.1">### Parámetros

Algunos de los principales parámetros (y su sintaxis) usados en los mensajes HTTP son:

- versión del protocolo: HTTP/1.1
- URIs: `"http:" "//" host [ ":" port ] [ abs_path [ "?" query ]]`
  Las siguientes tres URIs son equivalentes

  ~~~
  http://abc.com:80/~smith/home.html
  http://ABC.com/%7Esmith/home.html
  http://ABC.com:/%7esmith/home.html
  ~~~

- hora y fecha: **siempre** en GMT
- juegos de caracteres: especifican las preferencias del cliente. Puede haber uno o más separados por comas
- codificación del contenido: especifica como se puede codificar el contenido antes de enviarlo por la red

  ~~~
  Accept-encoding: gzip
  Accept-encoding: compress
  Accept-encoding: deflated
  ~~~

- media types: proporcionan data typing y type negotiation. Deben estar registrados en el IANA

  ~~~
  Content-Type: image/gif
  Accept: image/jpeg
  ~~~

- tags de lenguaje: 

  ~~~
  Accept-Language: en-US
  Content-Language: es
  ~~~
</t>
<t tx="vicent.20220331172223.1">@path .
</t>
<t tx="vicent.20220331172223.3">@language rest
@tabwidth -4


.. toctree::
   :maxdepth: 2
   :caption: Contents:
   
   05ArquitecturaSOA/Tema 5 Arquitectura SOA
   13OOP_Clases_y_Objetos/Tema 13 Programación orientada a objetos: Clases y Objetos
   14OOP_Herencia_y_Polimorfismo/Tema 14 Programación orientada a objetos Herencia Polimorfismo
   16Entorno_de_desarrollo_Java/Tema 16 El entorno de desarrollo java Arquitectura J2EE
   17Lenguaje_Java/Tema 17 Lenguaje de programacion Java
   18DiseñoWeb/Tema 18 Disenyo Web
   19Primefaces/Tema 19 JSF y Primefaces
   20JasperReports/Tema 20 Jasper Reports
   21PlantillasFreeMarker/Tema 21 FreeMarker
   22ArquitecturaMVC/Tema 22 Arquitectura MVC
   23PersistenciaConMyBatis/Tema 23 MyBatis
   24SpringBoot/Tema 24 Spring Boot
   30PruebaDelSoftware/Tema 30 Metodos de prueba del Software Junit
   31ControlDeVersiones/Tema 31 Control de versiones Subversion GIT
   32GestionProyectosMaven/Tema 32 Gestion integrada del desarrollo Maven
</t>
<t tx="vicent.20220401181802.1">    1. Sistemas operativos. Windows
    2. Sistemas operativos. Linux
    3. Sistemas operativos para dispositivos móviles.Android.iOS
    4. Sistemas de gestión de bases de datos. Bases de datos relacionales
    5. Arquitectura SOA. Servicios web. SOAP. JSON. REST
    6. Software libre. Características y tipos de licencias.
    7. Redes locales. Conceptos básicos. Características, tipos y protocolos
    8. Ofimática. LibreOffice Writer
    9. Ofimática. Libre Office Calc
    10. Modelo conceptual de datos. Modelos Entidades-Relación. Diagramas de flujo de datos
    11. Bases de datos relacionales. Fundamentos y reglas de normalización.
    12. Oracle. SQL. PL/SQL
    13. Programación orientada a objetos. Clases. Objetos.
    14. Programación orientada a objetos. Herencia. Polimorfismo
    15. Análisis y diseño orientado a objetos usando UML.
    16. El entorno de desarrollo java. Arquitectura J2EE
    17. Lenguaje de programación java: sintaxis ,tipos de datos, operadores, estructuras de control
    18. Diseño web. HTML 5  y CSS3
    19. JSF. Primefaces
    20. Desarrollo de Informes con JasperReports
    21. Creación y configuración de plantillas con FreeMarker
    22. Aqruitectura MVC. Spring Framework.
    23. Capa de persistencia de datos MyBatis
    24. Spring Boot. Construcción empaquetado y despliegue de aplicaciones
    25. Servidores de Aplicaciones Tomcat. Despliegue de aplicaciones.
    26. PHP
    27. JSP
    28. Desarrollo de aplicaciones con Ajax y Jquery
    29. Metodologías Ágiles de desarrollo. Scrum
    30. Métodos de prueba del Software. Junit
    31. Control de versiones. Subversion. GIT
    32. Gestión integrada del desarrollo. Maven</t>
<t tx="vicent.20220405191838.1">#### Métodos

Los métodos que pueden aparecer en la primera línea de la petición (request-line) son:

- GET: obtiene información de un servidor usando una URI
- HEAD: como GET, pero solo obtiene la línea de respuesta (status-line) y las cabeceras
- POST: envía información a un servidor usando un formulario HTML
- PUT: sube información al servidor que reemplaza un recurso ya existente
- DELETE: borra del servidor un recurso ya existente
- CONNECT: establece un túnel a un servidor usando una URI
- OPTIONS: opciones de comunicación para el target resource
- TRACE: realiza una traza de la petición
</t>
<t tx="vicent.20220405193412.1">#### URI

La URI de la request-line se puede especificar de tres maneras:

- `*`

  Por ejemplo `OPTIONS * HTTP/1.1`. Se usa en peticiones que no aplican a un recurso concreto, sino al propio servidor.

- URI absoluta

  Por ejemplo `GET http://www.w3.org/pub/WWW/TheProject.html HTTP/1.1`. Se usa cuando la petición se hace a un proxy,
  que la reenviará desde una de sus caches y devolverá la respuesta al cliente.

- path absoluto

  Es la forma más habitual. Por ejemplo:

  ~~~
  GET /pub/WWW/TheProject.html HTTP/1.1
  Host: www.w3.org
  ~~~

  Se usa cuando la petición se envía directamente al servidor que contiene el recurso, no a un proxy. El path no puede
  estar vacío, debe contener al menos `/` (que representa el server root).
</t>
<t tx="vicent.20220405195812.1">#### Request headers

Las cabeceras de petición permiten al cliente pasar al servidor información adicional sobre la petición y el propio 
cliente.

```{note}

En las peticiones también podemos utilizar las cabeceras generales y de entidad, pero estas las veremos en la seccción 
{ref}`Headers`.
```

Las cabeceras actúan como modificadores de la petición.

Las cabeceras de petición son:

- Accept-Charset
- Accept-Encoding
- Accept-Language
- Authorization
- Expect
- From
- Host
- If-Match
- If-Modified-Since
- If-None-Match
- If-Range
- If-Unmodified-Since
- Max-Forwards
- Proxy-Authorization
- Range
- Referer
- TE
- User-Agent


</t>
<t tx="vicent.20220405201733.1">#### Ejemplos

(peticionGET)=
Pedir el recurso hello.html al servidor web de tutorialspoint.com

~~~
GET /hello.htm HTTP/1.1
User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
Host: www.tutorialspoint.com
Accept-Language: en-us
Accept-Encoding: gzip, deflate
Connection: Keep-Alive
~~~

La cabecera `Connection: Keep-Alive` nos permite usar la cabecera general `Keep-Alive` para hacer sugerencias sobre el
número máximo de peticiones permitidas por conexión y sobre la duración máxima de la conexión TCP:

~~~
HTTP/1.1 200 OK
Connection: Keep-Alive
Content-Encoding: gzip
Content-Type: text/html; charset=utf-8
Date: Thu, 11 Aug 2016 15:23:13 GMT
Keep-Alive: timeout=5, max=1000
Last-Modified: Mon, 25 Jul 2016 04:32:39 GMT
Server: Apache

(body)
~~~

Es decir, las conexiones Keep-Alive permiten al cliente y al servidor usar la misma conexión TCP para enviar y recibir
varias peticiones y varias respuestas. Ver [esta página](https://www.imperva.com/learn/performance/http-keep-alive/) para 
una explicación más detallada.

![conexión keep-alive](images/300px-HTTP_persistent_connection.svg.png)

Las conexiones Keep-Alive están habilitadas por defecto en HTTP/1.1 pero no en HTTP/1.0.

Ejemplo de como enviar un formulario web a un servidor:

~~~
POST /cgi-bin/process.cgi HTTP/1.1
User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
Host: www.tutorialspoint.com
Content-Type: application/x-www-form-urlencoded
Content-Length: length
Accept-Language: en-us
Accept-Encoding: gzip, deflate
Connection: Keep-Alive

licenseID=string&amp;content=string&amp;/paramsXML=string
~~~

La cabecera `Content-Type` nos indica que estamos enviando datos de un formulario. El cuerpo del mensaje contiene los 
campos que estamos enviando separados por `&amp;`. El servidor usará el recurso `/cgi-bin/process.cgi` para procesar los 
datos recibidos

En lugar de un formulario podemos enviar texto XML si cambiamos la cabecera `Content-Type`:

~~~
POST /cgi-bin/process.cgi HTTP/1.1
User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
Host: www.tutorialspoint.com
Content-Type: text/xml; charset=utf-8
Content-Length: length
Accept-Language: en-us
Accept-Encoding: gzip, deflate
Connection: Keep-Alive

&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;string xmlns="http://clearforest.com/"&gt;string&lt;/string&gt;
~~~</t>
<t tx="vicent.20220406202039.1">#### Status Codes

Los significados de los códigos de estado son:

- 1XX: informativo

  El servidor informa de que ha recibido la petición y la está procesando
- 2XX: éxito

  El servidor informa de que ha recibido, comprendido y aceptado la petición
- 3XX: redirección

  It means further action must be taken in order to complete the request
- 4XX: error en el cliente

  La petición no se puede completar con éxito o contiene un error de sintaxis
- 5XX: error en el servidor

  La petición es válida pero el servidor no la puede completar con éxito</t>
<t tx="vicent.20220406202908.1">#### Cabeceras de respuesta

Las más utilizadas son:

- Accept-Ranges
- Age
- ETag
- Location
- Proxy-Authenticate
- Retry-After
- Server
- Vary
- WWW-Authenticate
</t>
<t tx="vicent.20220406202935.1">#### Ejemplos

Respuesta a {ref}`esta petición GET &lt;peticionGET&gt;`

~~~
HTTP/1.1 200 OK
Date: Mon, 27 Jul 2009 12:28:53 GMT
Server: Apache/2.2.14 (Win32)
Last-Modified: Wed, 22 Jul 2009 19:15:56 GMT
Content-Length: 88
Content-Type: text/html
Connection: Closed

&lt;html&gt;
&lt;body&gt;
&lt;h1&gt;Hello, World!&lt;/h1&gt;
&lt;/body&gt;
&lt;/html&gt;
~~~

Respuesta a una petición mal formada (con una versión HTTP incorrecta)

~~~
HTTP/1.1 400 Bad Request
Date: Sun, 18 Oct 2012 10:36:20 GMT
Server: Apache/2.2.14 (Win32)
Content-Length: 230
Content-Type: text/html; charset=iso-8859-1
Connection: Closed
  
&lt;!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN"&gt;
&lt;html&gt;
&lt;head&gt;
   &lt;title&gt;400 Bad Request&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
   &lt;h1&gt;Bad Request&lt;/h1&gt;
   &lt;p&gt;Your browser sent a request that this server could not understand.&lt;/p&gt;
   &lt;p&gt;The request line contained invalid characters following the protocol string.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
~~~</t>
<t tx="vicent.20220407190134.1">#### Formato

El formato genérico de las respuestas es

~~~
protocol version + status/error code + Reason-Phrase
[cabecera (General|Response|Entity) CRLF]*
CRLF
[cuerpo]
~~~

Vamos a ver ejemplos concretos.</t>
<t tx="vicent.20220407190238.1">#### Formato

El formato genérico de las peticiones es

~~~
método + URI + protocol version
[cabecera (General|Request|Entity) CRLF]*
CRLF
[cuerpo]
~~~

Vamos a ver ejemplos concretos.

</t>
<t tx="vicent.20220407190707.1">### Methods

Ver detalles en [esta página](https://www.tutorialspoint.com/http/http_methods.htm).



</t>
<t tx="vicent.20220407192703.1">#### OPTIONS

```{note} En el siguiente ejemplo hemos asumido que previamente se ha establecido una conexión TCP entre el cliente y
el servidor.
```

The OPTIONS method is used by the client to find out the HTTP **methods and other options** supported by a web server. The 
client can specify a URL for the OPTIONS method, or an asterisk (*) to refer to the entire server. The following example 
requests a list of methods supported by a web server running on tutorialspoint.com:

~~~
OPTIONS * HTTP/1.1
User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
~~~

The server will send an information based on the current configuration of the server, for example:

~~~
HTTP/1.1 200 OK
Date: Mon, 27 Jul 2009 12:28:53 GMT
Server: Apache/2.2.14 (Win32)
Allow: GET,HEAD,POST,OPTIONS,TRACE
Content-Type: httpd/unix-directory
~~~
</t>
<t tx="vicent.20220407192824.1">#### TRACE

The TRACE method is used to echo the contents of an HTTP Request back to the requester which can be used for debugging 
purpose at the time of development. The following example shows the usage of TRACE method:

~~~
TRACE / HTTP/1.1
Host: www.tutorialspoint.com
User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
~~~

The server will send the following message in response to the above request:

~~~
HTTP/1.1 200 OK
Date: Mon, 27 Jul 2009 12:28:53 GMT
Server: Apache/2.2.14 (Win32)
Connection: close
Content-Type: message/http
Content-Length: 39

TRACE / HTTP/1.1
Host: www.tutorialspoint.com
User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
~~~</t>
<t tx="vicent.20220407193049.1">#### CONNECT

The CONNECT method is used by the client to establish a network connection to a web server over HTTP. The following 
example requests a connection with a web server running on the host tutorialspoint.com:

~~~
CONNECT www.tutorialspoint.com HTTP/1.1
User-Agent: Mozilla/4.0 (compatible; MSIE5.01; Windows NT)
~~~

The connection is established with the server and the following response is sent back to the client:

~~~
HTTP/1.1 200 Connection established
Date: Mon, 27 Jul 2009 12:28:53 GMT
Server: Apache/2.2.14 (Win32)
~~~</t>
<t tx="vicent.20220409074315.1">### Seguridad

HTTP is used for communications over the internet, so application developers, information providers, and users should be 
aware of the security limitations in HTTP/1.1. This discussion does not include definitive solutions to the problems 
mentioned here but it does make some suggestions for reducing security risks.


</t>
<t tx="vicent.20220409074849.1">### Caching

HTTP is typically used for distributed information systems, where performance can be improved by the use of response 
caches. The HTTP/1.1 protocol includes a number of elements intended to make caching work.

The goal of caching in HTTP/1.1 is to eliminate the need to send requests in many cases, and to eliminate the need to 
send full responses in many other cases.

The basic cache mechanisms in HTTP/1.1 are implicit directives to caches where server-specifies expiration times and 
validators. We use the `Cache-Control` header for this purpose.

The `Cache-Control` header allows a client or server to transmit a variety of directives in either requests or responses. 
These directives typically override the default caching algorithms. The caching directives are specified in a 
comma-separated list. For example, `Cache-control: no-cache`.

The following cache request directives can be used by the client in its HTTP _request_:

- no-cache
  A cache must not use the response to satisfy a subsequent request without successful revalidation with the origin 
  server.

- no-store
  The cache should not store anything about the client request or server response.

- max-age = seconds
  Indicates that the client is willing to accept a response whose age is not greater than the specified time in seconds.

- max-stale [ = seconds ]
  Indicates that the client is willing to accept a response that has exceeded its expiration time. If seconds are given, 
  it must not be expired by more than that time.

- min-fresh = seconds
  Indicates that the client is willing to accept a response whose freshness lifetime is not less than its current age 
  plus the specified time in seconds.

- no-transform
  Does not convert the entity-body.

- only-if-cached
  Does not retrieve new data. The cache can send a document only if it is in the cache, and should not contact the 
  origin-server to see if a newer copy exists.

The following cache response directives can be used by the server in its HTTP _response_:

- public
  Indicates that the response may be cached by any cache.

- private
  Indicates that all or part of the response message is intended for a single user and must not be cached by a shared 
  cache.

- no-cache
  A cache must not use the response to satisfy a subsequent request without successful re-validation with the origin 
  server.

- no-store
  The cache should not store anything about the client request or server response.

- no-transform
  Does not convert the entity-body.

- must-revalidate
  The cache must verify the status of stale documents before using it and expired ones should not be used.

- proxy-revalidate
  The proxy-revalidate directive has the same meaning as the must- revalidate directive, except that it does not apply to 
  non-shared user agent caches.

- max-age = seconds
  Indicates that the client is willing to accept a response whose age is not greater than the specified time in seconds.

- s-maxage = seconds
  The maximum age specified by this directive overrides the maximum age specified by either the max-age directive or the 
  `Expires` header. The s-maxage directive is always ignored by a private cache.</t>
<t tx="vicent.20220409074943.1">## El protocolo SOAP

SOAP es el acrónimo de Simple Object Access Protocol. Es un protocolo de mensajería basado en XML que se usa para
intercambiar información entre ordenadores. Es una aplicación de la especificación XML.</t>
<t tx="vicent.20220409080546.1"># Tema 5 Fundamentos de arquitectura SOA

@path ./05ArquitecturaSOA
@language md
@others
</t>
<t tx="vicent.20220410085819.1">#### Personal Information Leakage

HTTP clients are often privy to large amount of personal information such as the user's name, location, mail address, 
passwords, encryption keys, etc. So you should be very careful to prevent unintentional leakage of this information via 
the HTTP protocol to other sources.

All the confidential information should be stored at the server in encrypted form.

Revealing the specific software version of the server might allow the server machine to become more vulnerable to attacks 
against software that is known to contain security holes.

Proxies that serve as a portal through a network firewall should take special precautions regarding the transfer of 
header information that identifies the hosts behind the firewall.

The information sent in the 'From' field might conflict with the user's privacy interests or their site's security policy, 
and hence, it should not be transmitted without the user being able to disable, enable, and modify the contents of the 
field.

Clients should not include a `Referer` header field in a (non-secure) HTTP request, if the referring page was transferred 
with a secure protocol.

Authors of services that use the HTTP protocol should not use `GET` based forms for the submission of sensitive data, 
because it will cause the data to be encoded in the `Request-URI`.
</t>
<t tx="vicent.20220410091157.1">#### File and Path Names Based Attack

The document should be restricted to the documents returned by HTTP requests to be only those that were intended by the 
server administrators.

For example, UNIX, Microsoft Windows, and other operating systems use `..` as a path component to indicate a directory 
level above the current one. On such a system, an HTTP server MUST disallow any such construct in the `Request-URI`, if it 
would otherwise allow access to a resource outside those intended to be accessible via the HTTP server.
</t>
<t tx="vicent.20220410091543.1">#### DNS Spoofing

Clients using HTTP rely heavily on the Domain Name Service, and are thus generally prone to security attacks based on the 
deliberate mis-association of IP addresses and DNS names. So clients need to be cautious in assuming the continuing 
validity of an IP number/DNS name association.

If HTTP clients cache the results of host name lookups in order to achieve a performance improvement, they must observe 
the TTL information reported by the DNS. If HTTP clients do not observe this rule, they could be spoofed when a 
previously-accessed server's IP address changes.

#### Location Headers and Spoofing

If a single server supports multiple organizations that do not trust one another, then it MUST check the values of 
`Location` and `Content-Location` headers in the responses that are generated under the control of said organizations to 
make sure that they do not attempt to invalidate resources over which they have no authority.

</t>
<t tx="vicent.20220410092752.1">#### Authentication Credentials

Existing HTTP clients and user agents typically retain authentication information indefinitely. HTTP/1.1 does not provide 
a method for a server to direct clients to discard these cached credentials which is a big security risk.

There are a number of work around to the parts of this problem, and so it is recommended to make the use of password 
protection in screen savers, idle time-outs, and other methods that mitigate the security problems inherent in this 
problem.

</t>
<t tx="vicent.20220410092836.1">#### Proxies and Caching

HTTP proxies are men-in-the-middle, and represent an opportunity for man-in-the-middle attacks. Proxies have access to 
security-related information, personal information about individual users and organizations, and proprietary information 
belonging to users and content providers.

Proxy operators should protect the systems on which proxies run, as they would protect any system that contains or 
transports sensitive information.

Caching proxies provide additional potential vulnerabilities, since the contents of the cache represent an attractive 
target for malicious exploitation. Therefore, cache contents should be protected as sensitive information.</t>
<t tx="vicent.20220410114347.1">### Introducción

Aspectos destacables son:

- SOAP is a communication protocol designed to communicate via Internet.
- SOAP can extend HTTP for XML messaging.
- _SOAP provides data transport for Web services_.
- SOAP can exchange complete documents or call a remote procedure.
- SOAP can be used for broadcasting a message.
- _SOAP is platform- and language-independent_.
- SOAP is the XML way of defining what information is sent and how.
- SOAP enables client applications to easily connect to remote services and invoke remote
methods.

The initial focus of SOAP is remote procedure calls transported via HTTP.

```{note} SOAP es un protocolo de mensajería mientras que HTTP es un protocolo de transporte.
Los mensajes SOAP se transportan vía HTTP de un nodo de la red a otro utilizando conexiones TCP/IP.
```</t>
<t tx="vicent.20220410123954.1">### Messages

A SOAP message is an ordinary XML document containing the following elements:

- Envelope : Defines the start and the end of the message. It is a mandatory element.
- Header: Contains any optional attributes of the message used in processing the message, either at an intermediary point 
  or at the ultimate end-point. It is an optional element.
- Body: Contains the XML data comprising the message being sent. It is a mandatory element.
- Fault: An optional Fault element that provides information about errors that occur while processing the message.

All these elements are declared in the [default namespace for the SOAP envelope](http://www.w3.org/2001/12/soap-envelope)
and the [default namespace for SOAP encoding and data types](http://www.w3.org/2001/12/soap-encoding).

The following block depicts the general structure of a SOAP message:

~~~ xml
&lt;?xml version="1.0"?&gt;
&lt;SOAP-ENV:Envelope
xmlns:SOAP-ENV="http://www.w3.org/2001/12/soap-envelope"
SOAP-ENV:encodingStyle="http://www.w3.org/2001/12/soap-encoding"&gt;
  &lt;SOAP-ENV:Header&gt;
    ...
    ...
  &lt;/SOAP-ENV:Header&gt;
  &lt;SOAP-ENV:Body&gt;
    ...
    ...
    &lt;SOAP-ENV:Fault&gt;
    ...
    ...
    &lt;/SOAP-ENV:Fault&gt;
  &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP_ENV:Envelope&gt;
~~~

El siguiente ejemplo muestra como enviar un mensaje SOAP con el método `POST` de `HTTP`:

~~~ http
POST /OrderEntry HTTP/1.1
Host: www.tutorialspoint.com
Content-Type: application/soap;  charset="utf-8"
Content-Length: nnnn

&lt;?xml version = "1.0"?&gt;
&lt;SOAP-ENV:Envelope 
   xmlns:SOAP-ENV = "http://www.w3.org/2001/12/soap-envelope" 
   SOAP-ENV:encodingStyle = " http://www.w3.org/2001/12/soap-encoding"&gt;
   ...
   Message information goes here
   ...
&lt;/SOAP-ENV:Envelope&gt;
~~~

(ruta_mensaje)=
```{note} El protocolo SOAP define la ruta de un mensaje como una lista de nodos con servicios SOAP que pueden procesar dicho 
mensaje.
```
</t>
<t tx="vicent.20220422105901.1">### Envelope

En SOAP el sobre es un mecanismo de empaquetado de información. Indica donde empieza y donde termina el mensaje, de 
manera que el receptor sabe cuando puede empezar a procesar dicho mensaje.

Puntos a tener en cuenta son:

- The Envelope is mandatory. Every SOAP message has a root `Envelope` element.
- The SOAP envelope is specified using `namespace prefix:Envelope`.
- The optional SOAP encoding is also specified using a namespace name and the optional `encodingStyle` element, which 
  could also point to an encoding style other than the SOAP one. El encoding define los tipos de datos soportados.
- Every `Envelope` element must contain exactly one `Body` element.
- If an `Envelope` contains a `Header` element, it must contain no more than one, and it must appear as the first child 
  of the `Envelope`, before the `Body`.
- The envelope changes when SOAP versions change (porque la versión se especifica en el namespace, ver ejemplo).
- A v1.1-compliant SOAP processor generates a fault upon receiving a message containing the v1.2 envelope namespace.
- A v1.2-compliant SOAP processor generates a `VersionMismatch` fault if it receives a message that does not include the v1.2 envelope namespace.

~~~ xml
&lt;?xml version = "1.0"?&gt;
&lt;SOAP-ENV:Envelope 
   xmlns:SOAP-ENV = "http://www.w3.org/2001/12/soap-envelope" 
   SOAP-ENV:encodingStyle = " http://www.w3.org/2001/12/soap-encoding"&gt;
   ...
   Message information goes here
   ...
&lt;/SOAP-ENV:Envelope&gt;
~~~</t>
<t tx="vicent.20220422130215.1">### Header

La cabecera SOAP permite añadir requerimientos específicos a nivel de aplicación, por ejemplo, una firma digital en un
servicio protegido por contraseña, o un número de cuenta en un servico de pago por uso.

Puntos a tener en cuenta son:

- It is an optional part of a SOAP message.
- Headers are intended to add new features and functionality.
- The header is encoded as the first immediate child element of the SOAP envelope.
- The SOAP header contains header entries defined in a namespace.
- Header children elements can occur multiple times.
- When multiple header children are defined, all immediate child elements of the SOAP header are interpreted as SOAP 
  `header blocks`.
</t>
<t tx="vicent.20220422222523.1">#### Header attributes

Una cabecera SOAP puede tener solo dos atributos: `Actor` y `MustUnderstand`.

Con el atributo `Actor` el cliente puede especificar que nodo de {ref}`la ruta del mensaje &lt;ruta_mensaje&gt;` es el 
destinatario de la cabecera y, por tanto, el encargado de procesarla.

El atributo `MustUnderstand` indica si la cabecera es obligatoria o no. Un valor `true` significa que el receptor debe
entender y procesar la cabecera o retornar un fallo.

Ejemplo de mensaje con una cabecera con un hijo:

~~~ xml
&lt;?xml version = "1.0"?&gt;
&lt;SOAP-ENV:Envelope 
   xmlns:SOAP-ENV = " http://www.w3.org/2001/12/soap-envelope"   
   SOAP-ENV:encodingStyle = " http://www.w3.org/2001/12/soap-encoding"&gt;

   &lt;SOAP-ENV:Header&gt;
      &lt;t:Transaction 
         xmlns:t = "http://www.tutorialspoint.com/transaction/" 
         SOAP-ENV:mustUnderstand = "true"&gt;5
      &lt;/t:Transaction&gt;
   &lt;/SOAP-ENV:Header&gt;
   ...
   ...
&lt;/SOAP-ENV:Envelope&gt;
~~~
</t>
<t tx="vicent.20220422230747.1">### Ejemplos

</t>
<t tx="vicent.20220422231148.1">### Cuerpo

El cuerpo es un elemento obligatorio en los mensajes SOAP. Contiene los datos que se transmiten en el mensaje, destinados
al receptor final (el end-point, el último nodo de la ruta del mensaje).



</t>
<t tx="vicent.20220424105914.1">#### Ejemplo 1: cabecera

Ejemplo completo con énfasis en la cabecera.

Petición:

~~~ xml
&lt;s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"&gt;
   &lt;s:Header&gt;
     &lt;Action s:mustUnderstand="1" 
       xmlns="http://schemas.microsoft.com/ws/2005/05/addressing/none"&gt;
       http://tempuri.org/IService/MyOperation
     &lt;/Action&gt;
     &lt;ActivityId CorrelationId="7224e2a9-8f9c-4acb-a924-17cb6af67b23"
 xmlns="http://schemas.microsoft.com/2004/09/ServiceModel/Diagnostics"&gt;
       43ffa660-a0c6-4249-bb36-648b73a06213&lt;/ActivityId&gt;
   &lt;/s:Header&gt;
   &lt;s:Body&gt;
     &lt;MyOperation xmlns="http://tempuri.org"&gt;
       &lt;MyValue&gt;Some Value&lt;/MyValue&gt;
     &lt;/MyOperation&gt;
   &lt;/s:Body&gt;
&lt;/s:Envelope&gt;
 ~~~

 Respuesta a la petición anterior:

 ~~~ xml
  &lt;s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"&gt;
   &lt;s:Header&gt;
     &lt;Action s:mustUnderstand="1"
       xmlns="http://schemas.microsoft.com/ws/2005/05/addressing/none"&gt;
       http://tempuri.org/IService/MyOperation
     &lt;/Action&gt;
     &lt;ActivityId CorrelationId="b898336e-d4e2-4eb7-a2c7-1e23f4630646" 
 xmlns="http://schemas.microsoft.com/2004/09/ServiceModel/Diagnostics"&gt;
       43ffa660-a0c6-4249-bb36-648b73a06213&lt;/ActivityId&gt;
   &lt;/s:Header&gt;
   &lt;s:Body&gt;
     &lt;MyOperationResponse xmlns="http://tempuri.org"&gt;
       &lt;MyOperationResult&gt;
         &lt;MyValue&gt;Some Value&lt;/MyValue&gt;
       &lt;/MyOperationResult&gt;
     &lt;/MyOperationResponse&gt;
   &lt;/s:Body&gt;
 &lt;/s:Envelope&gt;
 ~~~
</t>
<t tx="vicent.20220424110027.1">#### Ejemplo 2: cuerpo

Ejemplo completo con énfasis en el cuerpo.

Petición:

~~~ xml
&lt;?xml version = "1.0"?&gt;
&lt;SOAP-ENV:Envelope&gt;
   ........
   &lt;SOAP-ENV:Body&gt;
      &lt;m:GetQuotation xmlns:m = "http://www.tp.com/Quotation"&gt;
         &lt;m:Item&gt;Computers&lt;/m:Item&gt;
      &lt;/m:GetQuotation&gt;
   &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
~~~

Respuesta:

~~~ xml
&lt;?xml version = "1.0"?&gt;
&lt;SOAP-ENV:Envelope&gt;
   ........
   &lt;SOAP-ENV:Body&gt;
      &lt;m:GetQuotationResponse xmlns:m = "http://www.tp.com/Quotation"&gt;
         &lt;m:Quotation&gt;This is Qutation&lt;/m:Quotation&gt;
      &lt;/m:GetQuotationResponse&gt;
   &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
~~~

Normalmente la aplicación define un esquema con la semántica asociada a los elementos que contienen la petición y la 
respuesta. En este ejemplo es `xmlns:m = "http://www.tp.com/Quotation"`. 

```{note} Los elementos de este esquema (&lt;code&gt;m:GetQuotation&lt;/code&gt;, &lt;code&gt;m:Item&lt;/code&gt;, etc.) son específicos
de la aplicación, **no son parte del estándar SOAP**.
```
</t>
<t tx="vicent.20220424113811.1">### Fallo

Si al procesar la petición ocurre un error, la respuesta devuelta contendrá un elemento `Fault` en el cuerpo del mensaje.

El mecanismo de fallo de SOAP devuelve información específica del error: código, descripción, dirección del nodo que 
generó el error.

Puntos a tener en cuenta:

- un mensaje puede contener como máximo un bloque de fallo
- los códigos de éxito están en el rango 200 a 299, como en HTTP
- los códigos de error están en el rango 500 a 599, como en HTTP

Los subelementos de `Fault` son:

- faultCode: el código de error
- faultString: la descripción del error
- faultActor: el nodo que causó el error. Este elemento es obligatorio si el nodo que está procesando la petición no es 
  el end-point
- detail: contiene mensajes de error específicos de la aplicación. Puede contener subelementos.

Los códigos de error son:

- SOAP-ENV:VersionMismatch
- SOAP-ENV:MustUnderstand
- SOAP-ENV:Client
- SOAP-ENV:Server

The following code is a sample Fault. The client has requested a method named ValidateCreditCard, but the service does 
not support such a method. This represents a client request error, and the server returns the following SOAP response:

~~~ xml
&lt;?xml version = '1.0' encoding = 'UTF-8'?&gt;
&lt;SOAP-ENV:Envelope
   xmlns:SOAP-ENV = "http://schemas.xmlsoap.org/soap/envelope/"
   xmlns:xsi = "http://www.w3.org/1999/XMLSchema-instance"
   xmlns:xsd = "http://www.w3.org/1999/XMLSchema"&gt;

   &lt;SOAP-ENV:Body&gt;
      &lt;SOAP-ENV:Fault&gt;
         &lt;faultcode xsi:type = "xsd:string"&gt;SOAP-ENV:Client&lt;/faultcode&gt;
         &lt;faultstring xsi:type = "xsd:string"&gt;
            Failed to locate method (ValidateCreditCard) in class (examplesCreditCard) at
               /usr/local/ActivePerl-5.6/lib/site_perl/5.6.0/SOAP/Lite.pm line 1555.
         &lt;/faultstring&gt;
      &lt;/SOAP-ENV:Fault&gt;
   &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
~~~
</t>
<t tx="vicent.20220424120616.1">### Tipos de datos

SOAP soporta la codificación de tipos de datos escalares (cadenas, booleanos, enteros, coma flotante, dobles...) y 
compuestos (arrays y structs) a través de un conjunto de reglas internas. El estilo de la codificación se asigna en el 
atributo `SOAP-ENV:encodingStyle`.

Ejemplo de respuesta que utiliza el tipo de datos doble:

~~~ xml
&lt;?xml version = '1.0' encoding = 'UTF-8'?&gt;
&lt;SOAP-ENV:Envelope 
   xmlns:SOAP-ENV = "http://www.w3.org/2001/12/soap-envelope"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" 
   xmlns:xsd = "http://www.w3.org/2001/XMLSchema"&gt;
   
   &lt;SOAP-ENV:Body&gt;
      &lt;ns1:getPriceResponse 
         xmlns:ns1 = "urn:examples:priceservice"  
         SOAP-ENV:encodingStyle = "http://www.w3.org/2001/12/soap-encoding"&gt;
         &lt;return xsi:type = "xsd:double"&gt;54.99&lt;/return&gt;
      &lt;/ns1:getPriceResponse&gt;
   &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
~~~

Ejemplo de respuesta que utiliza un array de dobles:

~~~ xml
&lt;?xml version = '1.0' encoding = 'UTF-8'?&gt;
&lt;SOAP-ENV:Envelope
   xmlns:SOAP-ENV = "http://www.w3.org/2001/12/soap-envelope" 
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" 
   xmlns:xsd = "http://www.w3.org/2001/XMLSchema"&gt;

   &lt;SOAP-ENV:Body&gt;
      &lt;ns1:getPriceListResponse 
         xmlns:ns1 = "urn:examples:pricelistservice"  
         SOAP-ENV:encodingStyle = "http://www.w3.org/2001/12/soap-encoding"&gt;

         &lt;return xmlns:ns2 = "http://www.w3.org/2001/09/soap-encoding"  
            xsi:type = "ns2:Array" ns2:arrayType = "xsd:double[2]"&gt;
            &lt;item xsi:type = "xsd:double"&gt;54.99&lt;/item&gt;
            &lt;item xsi:type = "xsd:double"&gt;19.99&lt;/item&gt;
         &lt;/return&gt;
      &lt;/ns1:getPriceListResponse&gt;
   &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
~~~

También se soportan arrays multidimensionales.

Ejemplo de respuesta que utiliza un tipo de datos struct:

~~~ xml
&lt;?xml version = '1.0' encoding = 'UTF-8'?&gt;
&lt;SOAP-ENV:Envelope 
   xmlns:SOAP-ENV = "http://www.w3.org/2001/12/soap-envelope"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" 
   xmlns:xsd = "http://www.w3.org/2001/XMLSchema"&gt;

   &lt;SOAP-ENV:Body&gt;
      &lt;ns1:getProductResponse
         xmlns:ns1 = "urn:examples:productservice" 
         SOAP-ENV:encodingStyle = "http://www.w3.org/2001/12/soap-encoding"&gt;
		
         &lt;return xmlns:ns2 = "urn:examples" xsi:type = "ns2:product"&gt;
            &lt;name xsi:type = "xsd:string"&gt;Red Hat Linux&lt;/name&gt;
            &lt;price xsi:type = "xsd:double"&gt;54.99&lt;/price&gt;
            &lt;description xsi:type = "xsd:string"&gt;
               Red Hat Linux Operating System
            &lt;/description&gt;
            &lt;SKU xsi:type = "xsd:string"&gt;A358185&lt;/SKU&gt;
         &lt;/return&gt;
      &lt;/ns1:getProductResponse&gt;
   &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
~~~

En este ejemplo se define un struct llamado `product` con cuatro pares clave-valor, siendo las claves 
`name` (cadena), `price` (doble), `description` (cadena) y `SKU` (cadena).

</t>
<t tx="vicent.20220424120628.1">### Transporte

Los mensajes SOAP se pueden transportar con muchos protocolos (SMTP, FTP, MSMQ...) pero el más popular es HTTP.

Quite logically, SOAP requests are sent via an HTTP request and SOAP responses are returned within the content of the 
HTTP response. While SOAP requests can be sent via an HTTP `GET`, the specification includes details on HTTP `POST` only.

Additionally, both HTTP requests and responses are required to set their content type to text/xml.

The SOAP specification mandates that the client must provide a `SOAPAction` header, but the actual value of the 
`SOAPAction` header is dependent on the SOAP server implementation.

If the server does not require a full `SOAPAction` header, the client must specify an empty string ("") or a null value.

Here is a sample request sent via HTTP to the XMethods Babelfish Translation service:

~~~ http
POST /perl/soaplite.cgi HTTP/1.0
Host: services.xmethods.com
Content-Type: text/xml; charset = utf-8
Content-Length: 538
SOAPAction: "urn:xmethodsBabelFish#BabelFish"

&lt;?xml version = '1.0' encoding = 'UTF-8'?&gt;
&lt;SOAP-ENV:Envelope 
   xmlns:SOAP-ENV = "http://schemas.xmlsoap.org/soap/envelope/" 
   xmlns:xsi = "http://www.w3.org/1999/XMLSchema-instance"
   xmlns:xsd = "http://www.w3.org/1999/XMLSchema"&gt;

   &lt;SOAP-ENV:Body&gt;
      &lt;ns1:BabelFish
         xmlns:ns1 = "urn:xmethodsBabelFish"
         SOAP-ENV:encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"&gt;
         &lt;translationmode xsi:type = "xsd:string"&gt;en_fr&lt;/translationmode&gt;
         &lt;sourcedata xsi:type = "xsd:string"&gt;Hello, world!&lt;/sourcedata&gt;
      &lt;/ns1:BabelFish&gt;
   &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
~~~

Note the content type and the `SOAPAction` header. Also note that the BabelFish method requires two String parameters. 
The translation mode en_fr translates from English to French.

Here is the response from XMethods:

~~~ http
HTTP/1.1 200 OK
Date: Sat, 09 Jun 2001 15:01:55 GMT
Server: Apache/1.3.14 (Unix) tomcat/1.0 PHP/4.0.1pl2
SOAPServer: SOAP::Lite/Perl/0.50
Cache-Control: s-maxage = 60, proxy-revalidate
Content-Length: 539
Content-Type: text/xml

&lt;?xml version = "1.0" encoding = "UTF-8"?&gt;
&lt;SOAP-ENV:Envelope
   xmlns:SOAP-ENC = "http://schemas.xmlsoap.org/soap/encoding/"
   SOAP-ENV:encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/"
   xmlns:xsi = "http://www.w3.org/1999/XMLSchema-instance"
   xmlns:SOAP-ENV = "http://schemas.xmlsoap.org/soap/envelope/"
   xmlns:xsd = "http://www.w3.org/1999/XMLSchema"&gt;
   
   &lt;SOAP-ENV:Body&gt;
      &lt;namesp1:BabelFishResponse xmlns:namesp1 = "urn:xmethodsBabelFish"&gt;
         &lt;return xsi:type = "xsd:string"&gt;Bonjour, monde!&lt;/return&gt;
      &lt;/namesp1:BabelFishResponse&gt;
   &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
~~~

SOAP responses delivered via HTTP are required to follow the same HTTP status codes. For example, a status code of 
`200 OK` indicates a successful response. A status code of `500 Internal Server Error` indicates that there is a server 
error and that the SOAP response includes a `Fault` element.
</t>
<t tx="vicent.20220424125057.1">#### Ejemplo completo

In the example below, a `GetQuotation` request is sent to a SOAP Server over HTTP. The request has a `QuotationsName` 
parameter, and a `Quotation` will be returned in the response.

The namespace for the function is defined in http://www.xyz.org/quotation address.

Here is the SOAP request:

~~~ http
POST /Quotation HTTP/1.0
Host: www.xyz.org
Content-Type: text/xml; charset = utf-8
Content-Length: nnn

&lt;?xml version = "1.0"?&gt;
&lt;SOAP-ENV:Envelope
   xmlns:SOAP-ENV = "http://www.w3.org/2001/12/soap-envelope"
   SOAP-ENV:encodingStyle = "http://www.w3.org/2001/12/soap-encoding"&gt;

   &lt;SOAP-ENV:Body xmlns:m = "http://www.xyz.org/quotations"&gt;
      &lt;m:GetQuotation&gt;
         &lt;m:QuotationsName&gt;MiscroSoft&lt;/m:QuotationsName&gt;
      &lt;/m:GetQuotation&gt;
   &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
~~~

A corresponding SOAP response looks like:

~~~ http
HTTP/1.0 200 OK
Content-Type: text/xml; charset = utf-8
Content-Length: nnn

&lt;?xml version = "1.0"?&gt;
&lt;SOAP-ENV:Envelope
   xmlns:SOAP-ENV = "http://www.w3.org/2001/12/soap-envelope"
   SOAP-ENV:encodingStyle = "http://www.w3.org/2001/12/soap-encoding"&gt;

   &lt;SOAP-ENV:Body xmlns:m = "http://www.xyz.org/quotation"&gt;
      &lt;m:GetQuotationResponse&gt;
         &lt;m:Quotation&gt;Here is the quotation&lt;/m:Quotation&gt;
      &lt;/m:GetQuotationResponse&gt;
   &lt;/SOAP-ENV:Body&gt;
&lt;/SOAP-ENV:Envelope&gt;
~~~
</t>
<t tx="vicent.20220426184944.1">## Arquitectura SOA

Service Oriented Architecture es una metodología de arquitectura de software. Permite especificar la separación de
responsabilidades en servicios independientes que se comunican entre sí usando APIs (a menudo, pero no siempre
publicando eventos en un bus). La separación de responsabilidades en servicios se hace desde el punto de vista del 
negocio, por eso se dice que SOA tiene un enfoque de empresa.

As an example, you could have one service responsible for capturing customer orders, which publishes an OrderCaptured 
event to the bus; and a separate service responsible for tracking when the customer is billed and how much is owed, 
which subscribes to the Bus and responds to the OrderCaptured event. The first service might not need to know anything 
about billing due to the separation of responsibility. And the two services don't need to know about each other either, 
only about the events going on around them.

As you see, each service in SOA embodies the code and data required to execute a complete, discrete business function 
(e.g. checking a customer's credit, calculating a monthly loan payment, or processing a mortgage application).

La comunicación con los servicios a través de APIs proporciona bajo acoplamiento, lo que significa que se les puede 
llamar con poco o ningún conocimiento de su implementación. Los servicios se exponen utilizando protocolos de red 
estándar, como SOAP (Simple Object Access Protocol)/HTTP o JSON/HTTP, para enviar peticiones de lectura o modificación 
de datos.

Las ventajas de SOA son:

- *Reusabilidad de los servicios*. SOA permite construir diferentes aplicaciones a partir de los mismos servicios, 
facilita la integración de aplicaciones, la integración de datos y la orquestación de aplicaciones.
- En SOA los servicios se definen en función del negocio: encapsula el código y datos necesarios para ejecutar una 
función de negocio concreta. Eso facilita la comunicación entre los analistas de negocio y los desarrolladores.
- Potencia el uso de legacy systems más allá de su utilidad original. For example, many companies have used SOA to 
expose functionality from mainframe-based financial systems to new web applications, enabling their customers to serve 
themselves to processes and information previously accessible only through direct interaction with the company's 
employees or business partners.

Antes del auge de SOA a finales de los años 90 la conexión entre dos aplicaciones diferentes requería una integración 
punto a punto muy compleja, que los desarrolladores debían crear, en mayor parte a medida, para cada proyecto. La 
exposición de funcionalidad mediante SOA elimina la necesidad de recrear esa integración profunda cada vez.
</t>
<t tx="vicent.20220426185443.1"></t>
<t tx="vicent.20220426185448.1">## JSON

JSON (JavaScript Object Notation) es un formato de representación ligero, habitualmente utilizado para el intercambio de 
datos.

Está basado en un subconjunto del lenguaje de programación JavaScript (concretamente en el modo en que se construyen 
objetos).

JavaScript permite serializar objetos en cadenas de texto representadas en formato JSON, para luego de-serializarlas de 
vuelta a objetos JavaScript.

Las reglas de sintaxis de JSON se derivan de las reglas de notación de objetos de JavaScript:

- Los datos se representan en pares clave/valor
- Los datos se separan por comas
- Las llaves(“{“ y “}”) encapsulan objetos
- Los corchetes (“[“ y “]”) encapsulan colecciones (arrays)
- Las comillas dobles son obligatorias en los nombres de propiedad y en las cadenas
- No puede estar vacío (“null” es un JSON válido, pero “” no lo es)
- No se permiten los ceros a la izquierda en la definición de datos numéricos
- Los números en coma flotante usan el punto “.” para delimitar
</t>
<t tx="vicent.20220507204235.1"># Tema 18 Diseño Web. HTML5 y CSS3

@path ./18DiseñoWeb
@language md
@others
</t>
<t tx="vicent.20220508085627.1">## HTML5

La estructura básica de un documento HTML5 es:

~~~ html
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
  ...
  &lt;/head&gt;
  &lt;body&gt;
  ...
  &lt;/body&gt;
&lt;/html&gt;
~~~

El elemento `&lt;!DOCTYPE html&gt;` indica que estamos usando la última versión del lenguaje HTML.

El elemento `&lt;html&gt;` contiene el 
documento.

El elemento `&lt;head&gt;` contiene metadatos acerca del documento, por ejemplo su título, enlaces a otros documentos o el
encoding:

~~~ html
&lt;head&gt;
  &lt;title&gt;Welcome&lt;/title&gt;
  &lt;link rel="stylesheet" href="./assets/main.css"&gt;
  &lt;meta charset="utf-8"&gt;
&lt;/head&gt;
~~~

En el ejemplo de arriba, el elemento `&lt;link&gt;` enlaza el documento a una hoja de estilos (el tipo de relación lo determina 
el atributo `rel`) que se encuentra en la ruta contenida en el atributo `href`.

El elemento `&lt;body&gt;` contiene el cuerpo del documento.</t>
<t tx="vicent.20220508085634.1">## CSS3

El HTML5 se usa para crear contenido. El CSS3 es el lenguaje que se usa para dar estilo visual a los documentos HTML5.

Una hoja de estilo (un fichero `.css`) contiene un grupo de reglas que el navegador web interpreta y después aplica
a la página web que está mostrando. Cada regla tiene tres componentes, selector, propiedad[es] y valor:

~~~ css
selector {propiedad: valor;}
~~~

Por ejemplo:

~~~ css
p {font-size: 12px;
   background: blue;
}
~~~

</t>
<t tx="vicent.20220508092151.1">### Layout

Los elementos para dar layout al contenido son `div` y `span`. Se trata de contenedores genéricos que no tienen
significado semántico.

`&lt;div&gt;` se usa para dividir el documento en bloques de una o más líneas. Por defecto los bloques se apilan uno encima de
otro, pero usando CSS3 se pueden posicionar donde queramos, permitiendo crear layouts muy complejos.

`&lt;span&gt;` se usa para contener partes de una línea a las que se quiere dar un estilo concreto.

La mayoría de elementos en HTML5 son, desde el punto de vista de su presentación en pantalla, o bien block-level o bien
inline-level.

Los block-level, como `&lt;div&gt;`:

- empiezan en una nueva línea
- se apilan uno encima de otro
- ocupan toda la anchura disponible
- se pueden anidar
- pueden contener elementos del tipo inline-level

Los inline-level, como `&lt;span&gt;`:

- no empiezan en una nueva línea
- se pueden alinear uno al lado del otro
- utilizan solo la anchura de su contenido
- se pueden anidar
- *no* pueden contener elementos del tipo block-level
</t>
<t tx="vicent.20220508093555.1">### Elementos

HTML5 (a diferencia de sus antecesores) da estructura al contenido mediante el uso de elementos con significado semántico.

Hay varios tipos de elemento:

- para layout: `div` y `span`
- basados en texto (tienen contenido semántico): `h1` a `h6`, `p`
- para dar estructura (tienen contenido semántico): `header`, `footer`, `section`, `article`, `aside`, `nav`

</t>
<t tx="vicent.20220508100606.1">### Hiperenlaces

Los hiperenlaces permiten enlazar un recurso con otro. En HTML5 se crean con el elemento anchor, `&lt;a&gt;`, que es de
tipo inline-level. Por ejemplo:

~~~ html
&lt;a href="https://python.org"&gt;Python website&lt;/a&gt;
~~~

El atributo `href` (hyperlink reference) identifica el distino del hiperenlace. Al hacer clic en el contenido del anchor,
que en este caso es un texto, se nos redirige a esa URL.

También se puede enlazar a la misma página en la que está el anchor, utilizando como destino un **fragment URL**, o sea 
`#` seguido del valor del atributo `id` del elemento al que queremos enlazar. Por ejemplo:

~~~ html
&lt;body id="top"&gt;
  ...
  &lt;a href="#top"&gt;Back to top&lt;/a&gt;
  ...
&lt;/body&gt;
~~~

Otros valores de `href` (como URLs `mailto:`, URLs `tel:` o media fragments) permiten enlazar a una dirección de correo 
(necesita un cliente de correo), a un teléfono (necesita una aplicación de videoconferencia), descargar una imagen 
(necesita JavaScript)...:

~~~ html
&lt;body id="top"&gt;
  ...
  &lt;a href="mailto: vmas@example.org"&gt;Mail me please&lt;/a&gt;
  ...
&lt;/body&gt;
~~~

El browsing context (pestaña, ventana o `iframe`) donde se abrirá la URL de destino se determina con el atributo 
`target`:

- _self: the current browsing context. (Default)
- _blank: usually a new tab, but users can configure browsers to open a new window instead.
- _parent: the parent browsing context of the current one. If no parent, behaves as _self.
- _top: the topmost browsing context (the "highest" context that's an ancestor of the current one). If no ancestors, 
  behaves as _self.
</t>
<t tx="vicent.20220508110654.1">### Codificación de carácteres especiales

[Character encoding](https://en.wikipedia.org/wiki/Character_encoding) is the process of assigning numbers to graphical characters, especially the written characters of 
human language, allowing them to be stored, transmitted, and transformed using digital computers. The numerical 
values that make up a character encoding are known as "code points" and collectively comprise a "code space", a "code 
page", or a "character map".

Un charset o character set es el conjunto de caracteres que se va a codificar. Algunos ejemplos son el charset ASCII, el
EBCDIC y el [Unicode](https://en.wikipedia.org/wiki/Unicode) (que se puede implementar por varios encodings), que 
incluyen tanto caracteres gráficos como caracteres de 
control (delete, backspace, escape, EOL, EOF).

El character encoding o encoding es la codificación concreta que se usa para codificar un charset, por ejemplo
[ASCII (7 bits)](https://en.wikipedia.org/wiki/ASCII), 
[EBCDIC (8 bits)](https://en.wikipedia.org/wiki/EBCDIC), [UTF-8](https://en.wikipedia.org/wiki/UTF-8),
[UTF-16](https://en.wikipedia.org/wiki/UTF-16), [UTF-32](https://en.wikipedia.org/wiki/UTF-32)...

UTF-8 (code unit de 8 bits) usa una anchura variable entre uno y cuatro bytes de 8 bits. UTF-16 (code unit de 16 bits) 
usa una anchura variable entre uno y dos bytes de 16 bits. UTF-32 (code unit de 32 bits) usa una anchura fija de 1 byte
de 32 bits.

Como ejemplo, la codificación del carácter A en ASCII es:

~~~
A -&gt; 65 (1000001)
~~~

HTML4 fue la primera versión de HTML en usar encodings para tratar los caracteres internacionales de manera decente.

Para un documento HTML hay dos maneras de especificar el encoding:

- en el webserver, usando la cabecera `Content-type`

~~~
Content-Type: text/html; charset=ISO-8859-4
~~~

Esto permite al webserver alterar el encoding del documento durante la negociación de contenidos con el cliente.

- en el documento HTML5, dentro del elemento `&lt;head&gt;`

~~~ html
&lt;meta charset="utf-8"&gt;
~~~

En HTML5 el encoding recomendado es [UTF-8](https://en.wikipedia.org/wiki/UTF-8).

Una manera de codificar caracteres en HTML5 sin especificar un encoding es usar **referencias de caracter**, que pueden
ser numéricas (indicando el code point en formato `&amp;#nnnn;` o `&amp;#xhhhh`) o de entidad (con el formato `&amp;nombre;`, 
por ejemplo `&amp;Aacute;`, `&amp;nbsp;` o `&amp;lt;`).


</t>
<t tx="vicent.20220509193310.1">## Cascada, especificidad y herencia

En una hoja CSS todos los estilos/reglas se aplican en cascada, es decir, de arriba a abajo, permitiendo añadir nuevos 
estilos o sobreescribir estilos existentes. Por ejemplo:

~~~ css
p {font-size: 12px;
   background: blue;
}
p {font-size: 24px;
}
~~~

El resultado final es que los párrafos tendrán un fondo azul pero un tamaño de caracter de 24 píxeles. La cascada también
se aplica a las propiedades dentro de un estilo. Por ejemplo:

~~~ css
p {background: blue;
   background: orange;
}
~~~

Aquí el párrafo tendrá un fondo de color naranja porque la última declaración sobreescribe a las anteriores.

La cascada no es el único factor que influye en el orden en que se aplican los estilos. También hay que tener en 
cuenta la especificidad de los selectores.

Cada tipo de selector tiene una **especificidad o peso**. El selector universal, los combinadores y la pseudoclase
`:not()` no tienen peso.

Los selectores de tipo tienen una especificidad de 0-0-1, la menor de todas. Los de clase tiene una especificidad de 
0-1-0. Los de ID tienen una especificidad de 1-0-0, la mayor de todas.

```{important} La especificidad solo se aplica cuando el mismo elemento es objetivo de múltiples declaraciones. Según las reglas de 
CSS, en caso de que un elemento sea objeto de una declaración directa, esta siempre tendrá preferencia sobre las reglas 
heredadas de su ancestro.
```

También es significativo el concepto de **herencia**, que significa que algunas propiedades CSS heredan por defecto los 
valores establecidos en el elemento padre, pero otras no. Esto también puede causar una respuesta diferente a la que 
esperas.

[Referencia](https://developer.mozilla.org/es/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance).</t>
<t tx="vicent.20220509194811.1">## Selectores

Hay varios tipos de selector:

- de tipo: selecciona (se aplica) todos los elementos de un tipo dado
- de clase: se aplican a todos los elementos que tienen un atributo `class` con un valor dado
- de ID: selecciona un elemento basándose en el valor de su atributo `id`. Solo puede haber un elemento con un 
  determinado ID dentro de un documento.
- universal: selecciona todos los elementos del documento
- de atributo: selecciona elementos basándose en el valor de un determinado atributo

Ejemplos:

~~~ css
div {
}
.button {
}
#top {
}
* {

}
[autoplay] {
}
[autoplay="false"] {
}
~~~

Una regla se puede aplicar a una combinación de selectores. Las combinaciones más importantes son:

- grupos de selectores. El estilo se aplica a cada uno de los selectores separados por coma.

~~~ css
sel1, sel2, sel3 {}
~~~

- hermanos adyacentes. El segundo elemento sigue directamente al primero y ambos comparten el mismo padre

~~~ css
h1 + p {
}
~~~

Esta regla se aplicará a todos los elementos `&lt;p&gt;` que sigan directamente a un elemento `&lt;h1&gt;`.

- hermanos. El segundo elemento sigue al primero (no necesariamente de forma inmediata) y ambos comparten el mismo padre.

~~~ css
h1 ~ p {
}
~~~

Esta regla se aplicará a todos los elementos `&lt;p&gt;` que sigan a un elemento `&lt;h1&gt;`.

- hijo. Selecciona los elementos que son hijos directo del primero.

~~~ css
ul &gt; li {
}
~~~

Esta regla se aplicará a todos los elementos `&lt;li&gt;` que son hijos directos de un elemento `&lt;ul&gt;`.

- descendientes. Selecciona los elementos que son descendientes del primer elemento.

~~~ css
div span {
}
~~~

- columna

</t>
<t tx="vicent.20220509204654.1">### Pseudoclases y pseudoelementos

Las **pseudoclases** permiten la selección de elementos, basada en información de estado que *no* está contenida en el 
árbol de documentos. Por ejemplo, la regla `a:visited` se aplicará a todos los elementos `&lt;a&gt;` que hayan sido visitados 
por el usuario.

Los **pseudoelementos** son abstracciones del árbol que representan entidades más allá de los elementos HTML. Por ejemplo, 
HTML no tiene un elemento que describa la primera línea de un párrafo ni los marcadores de una lista. Los pseudoelementos 
representan estas entidades y nos permiten asignarles reglas CSS. De este modo podemos diseñar estas entidades de forma 
independiente.

Ejemplo: La regla `p::first-line` se aplicará a la primera línea de texto de todos los elementos `&lt;p&gt;`.

[Índice de pseudoclases](https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-classes).

[Índice de pseudoelementos](https://developer.mozilla.org/es/docs/Web/CSS/Pseudo-elements).
</t>
<t tx="vicent.20220511184126.1">## El modelo de cajas

El modelo de caja CSS  es un módulo  CSS que define cajas rectangulares, incluyendo sus rellenos y márgenes, que son 
generadas para los elementos y que se disponen de acuerdo al modelo de formato visual.

[Referencia](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model).

La propiedad `box-sizing` puede tener dos valores, `content-box` (valor por defecto) o `border-box`.</t>
<t tx="vicent.20220511200500.1">## Layout

The size and position of an element are often impacted by its containing block. Percentage values that are applied to the
width, height, padding, margin, and offset properties of an absolutely positioned element (i.e., which has its 
`position` property set to `absolute` or `fixed`) are computed from the element's containing block.

[Containing block](https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block)

[Apilamiento](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/Stacking_without_z-index)

[Stacking context](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context)

The stacking context is a three-dimensional conceptualization of HTML elements along an imaginary z-axis relative to the 
user, who is assumed to be facing the viewport or the webpage. HTML elements occupy this space in priority order based on
element attributes.

En el layout hay tres aspectos que conviene conocer:

- posicionamiento
- apilamiento y solapamiento
- como flotar elementos

Por defecto (`position: static`) los elementos de bloque se muestran de arriba a abajo en el orden en el que se crean en 
el docuemnto HTML:

~~~ html
&lt;div&gt;
  &lt;b&gt;DIV #1&lt;/b&gt;&lt;br /&gt;position: static;&lt;/div&gt;
&lt;div&gt;
  &lt;b&gt;DIV #2&lt;/b&gt;&lt;br /&gt;position: static;&lt;/div&gt;
&lt;div&gt;
  &lt;b&gt;DIV #3&lt;/b&gt;&lt;br /&gt;position: static;&lt;/div&gt;
&lt;div&gt;
  &lt;b&gt;DIV #4&lt;/b&gt;&lt;br /&gt;position: static;&lt;/div&gt;
&lt;div&gt;
  &lt;b&gt;DIV #5&lt;/b&gt;&lt;br /&gt;position: static;&lt;/div&gt;
~~~

~~~ css
b {
  font-family: sans-serif;
}

div {
  padding: 10px;
  border: 1px dashed;
  text-align: center;
}
~~~

El resultado es:


```{thumbnail} images/layout_001.png
```

El posicionamiento relativo, `position:relative`, funciona igual que el estático, los bloques se van colocando uno bajo 
el otro en orden de aparición, pero nos da la posibilidad de desplazar el elemento en cualquier dirección, lo cual da 
lugar a solapamientos entre bloques:

~~~ html
&lt;div id="abs1"&gt;
  &lt;b&gt;DIV #1A&lt;/b&gt;&lt;br /&gt;position: static;&lt;/div&gt;
&lt;div id="rel1" class="relative"&gt;
  &lt;b&gt;DIV #2A&lt;/b&gt;&lt;br /&gt;position: relative;&lt;/div&gt;
&lt;div id="rel2" class="relative"&gt;
  &lt;b&gt;DIV #3A&lt;/b&gt;&lt;br /&gt;position: relative;&lt;/div&gt;
&lt;div id="abs2" class="relative"&gt;
  &lt;b&gt;DIV #4A&lt;/b&gt;&lt;br /&gt;position: relative;&lt;/div&gt;
&lt;div id="sta1" class="static"&gt;
  &lt;b&gt;DIV #5A&lt;/b&gt;&lt;br /&gt;position: static;&lt;/div&gt;
~~~

~~~ css
b {
  font-family: sans-serif;
}

div {
  padding: 10px;
  border: 1px dashed;
  text-align: center;
}

.static {
  position: static;
  height: 80px;
  background-color: #ffc;
  border-color: #996;
}

.relative {
  position: relative;
  width: 300px;
  height: 80px;
  background-color: #cfc;
  border-color: #696;
  opacity: 0.7;
}

#rel1 {
  top: -10px;
  left: 10px;
}

#rel2 {
  top: 40px;
}

#rel3 {
  top: 10px;
}

~~~

El resultado es 

```{thumbnail} images/layout_002.png
```

Vemos como los bloques con posicionamiento relativo primero se colocan como si fueran estáticos y luego se les aplica
el desplazamiento. En caso de solapamiento entre dos bloques, como norma general, va encima el último bloque en 
posicionarse y los bloques estáticos siempre van debajo.

Los bloques con posicionamiento absoluto, `position: absolute`, se colocan como si fueran estáticos, pero una vez 
posicionados son ignorados por los bloques que se posicionen posteriormente.

~~~ html
&lt;div id="abs1b" class="absolute"&gt;
  &lt;b&gt;DIV #1B&lt;/b&gt;&lt;br /&gt;position: absolute;&lt;/div&gt;
&lt;div id="rel1b" class="relative"&gt;
  &lt;b&gt;DIV #2B&lt;/b&gt;&lt;br /&gt;position: relative;&lt;/div&gt;
&lt;div id="rel2b" class="relative"&gt;
  &lt;b&gt;DIV #3B&lt;/b&gt;&lt;br /&gt;position: relative;&lt;/div&gt;
&lt;div id="abs2b" class="absolute"&gt;
  &lt;b&gt;DIV #4B&lt;/b&gt;&lt;br /&gt;position: absolute;&lt;/div&gt;
&lt;div id="sta1b" class="static"&gt;
  &lt;b&gt;DIV #5B&lt;/b&gt;&lt;br /&gt;position: static;&lt;/div&gt;
~~~

~~~ css
b {
  font-family: sans-serif;
}

div {
  padding: 10px;
  border: 1px dashed;
  text-align: center;
}

.separator {
  margin: 5px 0px;
}

.static {
  position: static;
  height: 80px;
  background-color: #ffc;
  border-color: #996;
}

.absolute {
  position: absolute;
  width: 800px;
  background-color: #fdd;
  border-color: #900;
  opacity: 0.7;
}

.relative {
  position: relative;
  width: 300px;
  height: 80px;
  background-color: #cfc;
  border-color: #696;
  opacity: 0.7;
}

#rel1b {
  top: 25px;
  left: 600px;
}

#rel2b {
  top: 10px;
  left: 600px;
}
~~~

El resultado es 

```{thumbnail} images/layout_003.png
```

En resumen, el comportamiento por defecto cuando hay solapamiento entre dos bloques es:
- los bloques estáticos siempre van debajo
- en el resto de casos va encima el último en posicionarse

Este comportamiento se puede modificar con la propiedad `z-index` que nos permite especificar que posición ocupará
un bloque en caso de solapamiento y crear nuevos contextos de apilamiento. Cuando varios elementos se superponen, los 
elementos con mayor valor `z-index` cubren aquellos con menor valor.

~~~ html
&lt;div id="abs1b" class="absolute"&gt;
  &lt;b&gt;DIV #1B&lt;/b&gt;
  &lt;br /&gt;position: absolute;
  &lt;br /&gt;z-index: 5;&lt;/div&gt;
&lt;div id="rel1b" class="relative"&gt;
  &lt;b&gt;DIV #2B&lt;/b&gt;
  &lt;br /&gt;position: relative;
  &lt;br /&gt;z-index: 3;&lt;/div&gt;
&lt;div id="rel2b" class="relative"&gt;
  &lt;b&gt;DIV #3B&lt;/b&gt;
  &lt;br /&gt;position: relative;
  &lt;br /&gt;z-index: 2;&lt;/div&gt;
&lt;div id="abs2b" class="absolute"&gt;
  &lt;b&gt;DIV #4B&lt;/b&gt;
  &lt;br /&gt;position: absolute;
  &lt;br /&gt;z-index: 1;&lt;/div&gt;
&lt;div id="sta1b" class="static"&gt;
  &lt;b&gt;DIV #5B&lt;/b&gt;
  &lt;br /&gt;position: static;
  &lt;br /&gt;z-index: 8;&lt;/div&gt;
~~~

~~~ css
b {
  font-family: sans-serif;
}

div {
  padding: 10px;
  border: 1px dashed;
  text-align: center;
}

.static {
  position: static;
  height: 80px;
  background-color: #ffc;
  border-color: #996;
}

.absolute {
  position: absolute;
  width: 800px;
  background-color: #fdd;
  border-color: #900;
  opacity: 0.7;
}

.relative {
  position: relative;
  width: 300px;
  height: 80px;
  background-color: #cfc;
  border-color: #696;
  opacity: 0.7;
}

#rel1b {
  top: 25px;
  left: 600px;
  z-index: 3;
}

#rel2b {
  top: 10px;
  left: 600px;
  z-index: 2;
}

#abs1b {
  z-index: 5;
}

#abs2b {
  z-index: 1
}

#sta1b {
  z-index: 8;
}
~~~

El resultado es

```{thumbnail} images/layout_004.png
```

Como vemos el valor de `z-index` no crea un stacking context en bloques con posicionamiento estático. O sea, el valor
de `z-index` se ignora en dichos bloques. Por eso, en caso de solapamiento esos bloques siempre van debajo, tengan o no 
`z-index`.

Teniendo en cuenta todo lo visto en este apartado podemos entender mejor como se posicionan los bloques cuando se muestra
una página web:

- primero se colocan secuencialmente, uno debajo del otro
- luego se reposicionan teniendo en cuenta la propiedad `position`
    - los bloques con `position: absolute` se ignoran a la hora de posicionar los bloques siguientes
    - se aplican los desplazamientos (si los hay)
- finalmente los bloques que solapan se van considerando por parejas y se decide como solapan
    - si no hay propiedad `z-index` el solapamiento se decide en base a la `position` de los bloques que solapan
    - si hay `z-index` se aplica su valor (si el bloque es estático su `z-index` se ignora)
</t>
<t tx="vicent.20220514125127.1"></t>
<t tx="vicent.20220514125209.1">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Layout: positioning and stacking&lt;/title&gt;
    &lt;link rel="stylesheet" href="main2.css"&gt;
    &lt;meta charset="utf-8"&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div&gt;
      &lt;b&gt;DIV #1&lt;/b&gt;&lt;br /&gt;position: static;&lt;/div&gt;
    &lt;div&gt;
      &lt;b&gt;DIV #2&lt;/b&gt;&lt;br /&gt;position: static;&lt;/div&gt;
    &lt;div&gt;
      &lt;b&gt;DIV #3&lt;/b&gt;&lt;br /&gt;position: static;&lt;/div&gt;
    &lt;div&gt;
      &lt;b&gt;DIV #4&lt;/b&gt;&lt;br /&gt;position: static;&lt;/div&gt;
    &lt;div&gt;
      &lt;b&gt;DIV #5&lt;/b&gt;&lt;br /&gt;position: static;&lt;/div&gt;

    &lt;div class="separator"&gt;&lt;/div&gt;

    &lt;div id="abs1" class="static"&gt;
      &lt;b&gt;DIV #1A&lt;/b&gt;&lt;br /&gt;position: static;&lt;/div&gt;
    &lt;div id="rel1" class="relative"&gt;
      &lt;b&gt;DIV #2A&lt;/b&gt;&lt;br /&gt;position: relative;&lt;/div&gt;
    &lt;div id="rel2" class="relative"&gt;
      &lt;b&gt;DIV #3A&lt;/b&gt;&lt;br /&gt;position: relative;&lt;/div&gt;
    &lt;div id="rel3" class="relative"&gt;
      &lt;b&gt;DIV #4A&lt;/b&gt;&lt;br /&gt;position: relative;&lt;/div&gt;
    &lt;div id="sta1" class="static"&gt;
      &lt;b&gt;DIV #5A&lt;/b&gt;&lt;br /&gt;position: static;&lt;/div&gt;

    &lt;div class="separator"&gt;&lt;/div&gt;

    &lt;div id="abs1b" class="absolute"&gt;
      &lt;b&gt;DIV #1B&lt;/b&gt;
      &lt;br /&gt;position: absolute;
      &lt;br /&gt;z-index: 5;&lt;/div&gt;
    &lt;div id="rel1b" class="relative"&gt;
      &lt;b&gt;DIV #2B&lt;/b&gt;
      &lt;br /&gt;position: relative;
      &lt;br /&gt;z-index: 3;&lt;/div&gt;
    &lt;div id="rel2b" class="relative"&gt;
      &lt;b&gt;DIV #3B&lt;/b&gt;
      &lt;br /&gt;position: relative;
      &lt;br /&gt;z-index: 2;&lt;/div&gt;
    &lt;div id="abs2b" class="absolute"&gt;
      &lt;b&gt;DIV #4B&lt;/b&gt;
      &lt;br /&gt;position: absolute;
      &lt;br /&gt;z-index: 1;&lt;/div&gt;
    &lt;div id="sta1b" class="static"&gt;
      &lt;b&gt;DIV #5B&lt;/b&gt;
      &lt;br /&gt;position: static;
      &lt;br /&gt;z-index: 8;&lt;/div&gt;

    &lt;div class="separator"&gt;&lt;/div&gt;
&lt;div&gt;
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Instrument&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;th colspan="2"&gt;Musicians and... Instruments!&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;John Lennon&lt;/td&gt;
      &lt;td&gt;Rhythm Guitar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Paul McCartney&lt;/td&gt;
      &lt;td&gt;Bass&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;George Harrison&lt;/td&gt;
      &lt;td&gt;Lead Guitar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ringo Starr&lt;/td&gt;
      &lt;td&gt;Drums&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</t>
<t tx="vicent.20220514125215.1">b {
  font-family: sans-serif;
}

div {
  padding: 10px;
  border: 1px dashed;
  text-align: center;
}

.separator {
  margin: 5px 0px;
}

.static {
  position: static;
  height: 80px;
  background-color: #ffc;
  border-color: #996;
}

.absolute {
  position: absolute;
  width: 800px;
  background-color: #fdd;
  border-color: #900;
  opacity: 0.7;
}

.relative {
  position: relative;
  width: 300px;
  height: 80px;
  background-color: #cfc;
  border-color: #696;
  opacity: 0.7;
}

#rel1 {
  top: -10px;
  left: 10px;
}

#rel2 {
  top: 40px;
}

#rel3 {
  top: 10px;
}

#rel1b {
  top: 25px;
  left: 600px;
}

#rel2b {
  top: 10px;
  left: 600px;
}

</t>
<t tx="vicent.20220515083729.1">b {
  font-family: sans-serif;
}

div {
  padding: 10px;
  border: 1px dashed;
  text-align: center;
}

.separator {
  margin: 5px 0px;
}

.static {
  position: static;
  height: 80px;
  background-color: #ffc;
  border-color: #996;
}

.absolute {
  position: absolute;
  width: 800px;
  background-color: #fdd;
  border-color: #900;
  opacity: 0.7;
}

.relative {
  position: relative;
  width: 300px;
  height: 80px;
  background-color: #cfc;
  border-color: #696;
  opacity: 0.7;
}

#rel1 {
  top: -10px;
  left: 10px;
}

#rel2 {
  top: 40px;
}

#rel3 {
  top: 10px;
}

#rel1b {
  top: 25px;
  left: 600px;
  z-index: 3;
}

#rel2b {
  top: 10px;
  left: 600px;
  z-index: 2;
}

#abs1b {
  z-index: 5;
}

#abs2b {
  z-index: 1
}

#sta1b {
  z-index: 8;
}

table, tr {
  margin-top: 1px;
}

tr:nth-child(2n) {
  background-color: rgba(150, 212, 212, 0.4);
}

thead th {
  background-color: rgba(350, 212, 212, 0.4);
}

tfoot th {
  background-color: rgba(050, 212, 212, 0.4);
}


</t>
<t tx="vicent.20220515095559.1">## Flotar elementos con flexbox

[Flexible box](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox)

The Flexible Box Module, usually referred to as flexbox, was designed as a one-dimensional layout model, and as a method 
that could offer space distribution between items in an interface and powerful alignment capabilities. 

When we describe flexbox as being one dimensional we are describing the fact that flexbox deals with layout in one 
dimension at a time — either as a row or as a column. This can be contrasted with the two-dimensional model of CSS Grid 
Layout, which controls columns and rows together.

~~~ html
&lt;div class="box"&gt;
  &lt;div class="one"&gt;One&lt;/div&gt;
  &lt;div class="two"&gt;Two&lt;/div&gt;
  &lt;div class="three"&gt;Three&lt;/div&gt;
&lt;/div&gt;
~~~

~~~ css
.box {
  border: dotted 1px;
  padding: 5px;
  display: flex;
  flex-direction: row-reverse;
  flex-wrap: wrap;
}

.box div {
  border: solid 1px;
  width: 40%;
}

/* flex: flex-grow flex-shrink flex-basis */
.one {
  flex: 0 1 auto;
  background-color: #bfa;
}

.two {
  flex: 0 1 auto;
  background-color: #dfc;
}

.three {
  background-color: #efc;
  flex: 1 2 auto;
}
~~~

El resultado es

```{thumbnail} images/flexbox_001.png
```

Los elementos dentro del flexbox ocupan un 40% el ancho disponible. Como `flex-wrap: wrap` los elementos que no caben 
(en este caso el último) se pasan a la siguiente línea. Si ponemos `flex-wrap: nowrap`, entonces los elementos que no 
caben se comprimen:

```{thumbnail} images/flexbox_002.png
```
</t>
<t tx="vicent.20220515095927.1">## Grid layout

[Grid layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout)
</t>
<t tx="vicent.20220515105451.1">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Layout: flexbox&lt;/title&gt;
    &lt;link rel="stylesheet" href="main3.css"&gt;
    &lt;meta charset="utf-8"&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class="box"&gt;
      &lt;div class="one"&gt;One&lt;/div&gt;
      &lt;div class="two"&gt;Two&lt;/div&gt;
      &lt;div class="three"&gt;Three and many more... lfdkjwéfjewñorjlwejrñojgwergjwñoergjelgwjeogjwegowergoewgjweg&lt;/div&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</t>
<t tx="vicent.20220515105805.1">.box {
  border: dotted 1px;
  padding: 5px;
  display: flex;
  flex-direction: row-reverse;
  flex-wrap: nowrap;
}

.box div {
  border: solid 1px;
  width: 40%;
}
.one {
  flex: 0 1 auto;
  background-color: #bfa;
}

.two {
  flex: 0 1 auto;
  background-color: #dfc;
}

.three {
  background-color: #efc;
  flex: 0 2 auto;
}</t>
<t tx="vicent.20220515124701.1">### Tablas

~~~ html
&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;Instrument&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tfoot&gt;
    &lt;tr&gt;
      &lt;th colspan="2"&gt;Musicians and... Instruments!&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;John Lennon&lt;/td&gt;
      &lt;td&gt;Rhythm Guitar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Paul McCartney&lt;/td&gt;
      &lt;td&gt;Bass&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;George Harrison&lt;/td&gt;
      &lt;td&gt;Lead Guitar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ringo Starr&lt;/td&gt;
      &lt;td&gt;Drums&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
~~~

~~~ css
table, tr {
  margin-top: 1px;
}

tr:nth-child(2n) {
  background-color: rgba(150, 212, 212, 0.4);
}

thead th {
  background-color: rgba(350, 212, 212, 0.4);
}

tfoot th {
  background-color: rgba(050, 212, 212, 0.4);
}
~~~

El resultado es

```{thumbnail} images/tabla_001.png
```
</t>
<t tx="vicent.20220528085051.1"></t>
<t tx="vicent.20220528085100.1"></t>
<t tx="vicent.20220528085120.1"></t>
<t tx="vicent.20220528085316.1"></t>
<t tx="vicent.20220528085448.1"></t>
<t tx="vicent.20220528085500.1"></t>
<t tx="vicent.20220528085607.1"></t>
<t tx="vicent.20220528085631.1"></t>
<t tx="vicent.20220528085656.1"></t>
<t tx="vicent.20220528085742.1"># Tema 13 OOP: Clases y Objetos 

@path ./13OOP_Clases_y_Objetos
@language md
@others
</t>
<t tx="vicent.20220528085821.1"># Tema 14 OOP: Herencia y Polimorfismo 

@path ./14OOP_Herencia_y_Polimorfismo
@language md
@others
</t>
<t tx="vicent.20220528085855.1"></t>
<t tx="vicent.20220528085918.1"># Tema 16 El entorno de desarrollo Java. Arquitectura JEE

@path ./16Entorno_de_desarrollo_Java
@language md
@others
</t>
<t tx="vicent.20220528085937.1"># Tema 17 Lenguaje de programación Java: sintaxis ,tipos de datos, operadores, estructuras de control

@path ./17Lenguaje_Java
@language md
@others
</t>
<t tx="vicent.20220528085957.1"></t>
<t tx="vicent.20220528090343.1"></t>
<t tx="vicent.20220528090351.1"></t>
<t tx="vicent.20220528090410.1"></t>
<t tx="vicent.20220528090429.1"></t>
<t tx="vicent.20220528090458.1"># Tema 30 Métodos de prueba del software. JUnit

@path ./30PruebaDelSoftware
@language md
@others
</t>
<t tx="vicent.20220528090520.1"># Tema 31 Control de versiones. Subversion. GIT.

@path ./31ControlDeVersiones
@language md
@others
</t>
<t tx="vicent.20220528090539.1"># Tema 32 Gestión Integrada del Desarrollo. Maven

@path ./32GestionProyectosMaven
@language md
@others
</t>
<t tx="vicent.20220528090703.1"></t>
<t tx="vicent.20220528090721.1"></t>
<t tx="vicent.20220528090846.1"></t>
<t tx="vicent.20220528091855.1"></t>
<t tx="vicent.20220528092009.1"></t>
<t tx="vicent.20220528092032.1"></t>
<t tx="vicent.20220528092851.1"></t>
<t tx="vicent.20220528093019.1"></t>
<t tx="vicent.20220613173035.1">## JUnit

Es un framework para crear unidades de test en Java. Hay dos versiones JUnit4 y JUnit5, que es muy reciente.

En las unidades de test se comprueba el correcto funcionamiento de los métodos de las clases.

En el framework podemos:

- crear unidades de test
- ejecutar un runner en lugar de ejecutar cada unidad de test individualmente. El runner se encargará de ejecutar las
  unidades de test que tenga configuradas
- crear suites. Una suite es un runner especializado, en el que especificamos qué unidades de test queremos ejecutar

Los tests, runners y suites se marcan con las anotaciones `@Test`, `@RunWith` y `@Suite`.

Las unidades de test y los runners se pueden ejecutar por línea de comando o en un IDE. Por ejemplo, el `vscode` tiene
una extensión para trabajar con JUnit que permite crear esqueletos de JUnits y ejecutar y depurar unidades de test,
runners y suites.

```{thumbnail} images/JUnit_en_VSCode.png
```

En el árbol de unidades de test si nos colocamos sobre una unidad de test, podemos ejecutarla/depurarla con el botón
derecho del ratón. Las carpetas son runners. Si ejecutamos una carpeta se ejecutarán todas las unidades de test que 
contiene. En el código de `Ejercicio3_1Test.java` podemos ver como se define una suite, que se lanzará al ejecutar
`Ejercicio3_1Test.java`. La suite ejecutará los tests de `Ejercicio3_1Test.java` y `Ejercicio2_1Test.java`.
</t>
<t tx="vicent.20220613183309.1">## Métodos de prueba

Ver 16. MВtodos de prueba del software. JUnit.odt

En resumen, de nivel bajo a nivel alto:

- unit tests: prueban el correcto funcionamiento de funciones y métodos
- integration tests: prueban si los diferentes componentes de una aplicación se hablan bien entre ellos. Por ejemplo, si 
  se tiene acceso a una BBDD o la interfaz de usuario se refresca ante un evento. No verifican que los resultados sean
  correctos, solo que las acciones se pueden llevar a cabo
- functional tests: prueban si los requerimientos específicos de negocio se cumplen. O sea, verifican funcionalidades
  concretas de la aplicación
- end-to-end tests: verifican interacciones concretas del usuario con la aplicación. Por ejemplo, al hacer clic en un
  botón se abre una página web o que se recibe una notificación por email
- regression tests: comprueban que las nuevas versiones de una aplicación no rompen la funcionalidad de las versiones 
  anteriores
- smoke testing: con la aplicación ya terminada comprueban que los requerimientos básicos funcionan correctamente (que 
  la aplicación no hace aguas de manera evidente)
- acceptance testing: son pruebas formales, ejecutadas para verificar si un sistema satisface sus requerimientos de 
  negocio. Estas pruebas requieren que el software se encuentre en funcionamiento
- performance testing: pruebas de rendimiento en condiciones de carga alta
- exploratory testing: son tests *manuales* que se hacen para intentar descubrir errores no obvios. Un buen ejemplo
  son las pruebas de gorila de una interfaz de usuario (a veces el usuario ejecuta una secuencia de acciones no esperada
  por el programador y puede hacer fallar la aplicación)

Cuando se habla de Test Driven Development (desarrollo guiado por pruebas), se hace referencia a unit tests. Es decir, 
*se usan pruebas de este tipo como especificaciones de lo que nuestro código debe hacer*.

Los testing frameworks permiten la ejecución automatizada de tests.

Los tests automatizados y organizados en suites se pueden ejecutar en el servidor en el que se está desarrollando la
aplicación (por ejemplo, github) permitiendo así la integración continua (los tests se ejecutan automáticamente cada
vez que se sube una modificación de código al servidor) y la entrega continua.
</t>
<t tx="vicent.20220615181441.1">## Maven

Maven es una herramienta para la gestión de desarrollo de proyectos de software. Utiliza patrones y promueve el uso de
buenas prácticas. Es muy utilizada en Java.

Maven está basado en el Project Object Model. En un fichero pom.xml se declara todo lo que necesita Maven para gestionar
el proyecto.

Maven permite gestionar:

- builds
    - generar el proyecto con una estructura estándar (todos los proyectos Maven tienen la misma estructura)
    - reconstruirlo
    - compilarlo
- documentation
- reporting: obtener información de calidad sobre el proyecto (referencias cruzadas en el código, informes de unit tests,
  listas de correo...) en un sitio web o en PDF
- dependencies: automatizar la gestión de dependencias
- gestionar las unidades de test
- gestionar los plugins
- releases
- distribution: empaquetarlo (.jar, .war)

Se puede usar por línea de comando pero la mayor parte de los IDEs lo soportan de manera bastante completa.

La estructura de un proyecto Maven es:

```{thumbnail} images/estructura.png
```
</t>
<t tx="vicent.20220615191428.1">### Guía rápida (CLI)

Versión instalada:

~~~ bash
$ mvn --version
Apache Maven 3.8.4 (9b656c72d54e5bacbed989b64718c159fe39b537)
Maven home: /opt/maven
Java version: 11.0.15, vendor: Private Build, runtime: /usr/lib/jvm/java-11-openjdk-amd64
Default locale: es_ES, platform encoding: UTF-8
OS name: "linux", version: "5.15.0-37-generic", arch: "amd64", family: "unix"
~~~

Crear un proyecto:

~~~ bash
$ mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart 
-DarchetypeVersion=1.4 -DinteractiveMode=false
~~~

Esto usará el arquetipo estándar (disponible en el repositorio Maven) `maven-archetype-quickstart` para construir un
proyecto llamado `my-app` cuyo paquete raíz es `com.mycompany.app`. La estructura del proyecto será:

~~~ bash
my-app
|-- pom.xml
`-- src
    |-- main
    |   `-- java
    |       `-- com
    |           `-- mycompany
    |               `-- app
    |                   `-- App.java
    `-- test
        `-- java
            `-- com
                `-- mycompany
                    `-- app
                        `-- AppTest.java
~~~

Vemos que `${basedir}/src/main/java` contiene el código fuente del proyecto, mientras que `${basedir}/src/test/java` 
contiene las unidades de test. Al generar el proyecto se crean esqueletos tanto de la aplicación de entrada al proyecto 
como de sus tests.

En `${basedir}` se ha generado el `pom.xml` que es el corazón de la configuración del proyecto Maven.

Compilar las fuentes de un proyecto:

~~~ bash
$ mvn compile
~~~

Esto compila el proyecto y deja el resultado en la carpeta `myapp/target/classes`.

Compilar *y ejecutar* los tests:

~~~ bash
$ mvn test
~~~

Compilar *pero no ejecutar* los tests:

~~~ bash
$ mvn test-compile
~~~

Compilar y empaquetar:

~~~ bash
$ mvn package
~~~

Compila el proyecto y luego lo empaqueta en un `.jar` o un `.war` (si el proyecto es una aplicación web). El artefacto
resultante (el `.jar`) se almacena en `${basedir}/target`.

Ejecuta el proyecto empaquetado:

~~~ bash
$ java -cp target/my-app-1.0-SNAPSHOT.jar com.mycompany.app.App
~~~

Instalar el `.jar` en el repositorio local de artefactos `$HOME/.m2/repository`:

~~~ bash
$ mvn install
~~~
</t>
<t tx="vicent.20220615193810.1">### Fases del ciclo de vida del proyecto

Although hardly a comprehensive list, these are the most common default lifecycle phases executed.

- validate: validate the project is correct and all necessary information is available
- compile: compile the source code of the project
- test: test the compiled source code using a suitable unit testing framework. These tests should not require the code 
  be packaged or deployed
- package: take the compiled code and package it in its distributable format, such as a JAR.
- integration-test: process and deploy the package if necessary into an environment where integration tests can be run
- verify: run any checks to verify the package is valid and meets quality criteria
- install: install the package into the local repository, for use as a dependency in other projects locally
- deploy: done in an integration or release environment, copies the final package to the remote repository for sharing 
  with other developers and projects.

There are two other Maven lifecycles of note beyond the default list above. They are

- clean: cleans up artifacts created by prior builds
- site: generates site documentation for this project

Phases are actually mapped to underlying goals. The specific goals executed per phase is dependant upon the packaging 
type of the project. For example, package executes `jar:jar` if the project type is a JAR, and `war:war` if the project 
type is - you guessed it - a WAR.

An interesting thing to note is that phases and goals may be executed in sequence.

~~~ bash
$ mvn clean dependency:copy-dependencies package
~~~

This command will clean the project, copy dependencies, and package the project (executing all phases up to package, of 
course).

~~~ bash
$ mvn site
~~~

This phase generates a site based upon information on the project's pom. You can look at the documentation generated 
under `target/site`.</t>
<t tx="vicent.20220618074740.1">### Arquetipos

Por definición, un arquetipo es un patrón o modelo que se usa para alcanzar un objetivo siempre de la misma 
manera. En Maven, un arquetipo es una plantilla de proyecto que, combinada con user input, genera un proyecto Maven 
adaptado a las necesidades del usuario. El usuario decide, en función de las necesidades que tenga, que arquetipo 
utilizar (los arquetipos se pueden combinar). La estructura del proyecto generada por los diferentes arquetipos puede
verse en [este enlace](https://maven.apache.org/archetypes/index.html)

Los arquetipos de Maven se agrupan en el toolkit Archetype. Cada arquetipo se identifica con un ArtifactID.

Para crear un proyecto basado en un arquetipo tenemos que invocar `mvn archetype:generate`.</t>
<t tx="vicent.20220623164829.1">## Modificadores de acceso

[Reference](https://www.baeldung.com/java-access-modifiers)

As the name suggests access modifiers in Java helps to restrict the scope of a class, constructor, variable or method,
o sea, ayudan a encapsular el estado de un objeto. 
There are four types of access modifiers available in java: 

- `default` (no keyword required)
- `private`
- `protected`
- `public`

Una top-level class solo puede utilizar los modificadores `public` y `default`. Los miembros de una clase (fields and
methods) pueden usar los cuatro modificadores.

Cuando se aplican a una clase, los modificadores definen si la clase se puede importar o no, y su significado es el 
siguiente:

- `public`: la clase es visible desde cualquier parte del código
- `default`: la clase solo es visible desde el paquete al que pertenece

Para usar una clase `public` desde otro paquete hay que importar la clase. Para usar una clase desde el mismo paquete
al que pertenece no hace falta importarla, se puede usar directamente.

Para los miembros de una clase, los modificadores permiten restringir el acceso garantizado por el modificador de 
la clase.

- `public`: el miembro es accesible desde cualquier lugar del código
- `protected`: el miembro solo es accesible desde el paquete al que pertenece la clase y sus subclases visibles (aunque 
  estén en otro paquete)
- `default`: el miembro solo es accesible desde el paquete al que pertenece la clase
- `private`: el miembro solo es accesible desde dentro de la clase en que está definida

Lógicamente si la clase es `default` los modificadores `public` o `protected` en un miembro no tienen sentido. En ese 
caso se puede [usar una
interfaz](https://stackoverflow.com/questions/18758317/how-do-i-access-a-public-method-of-a-default-class-outside-the-package)

En el caso de variables accesible significa que la variable se puede leer y modificar.

En el caso de métodos accesible significa que el método se puede invocar.</t>
<t tx="vicent.20220623195702.1">## Top-level clases

Este término puede llevar a confusión, porque parece que haga referencia a la posición de una clase dentro de la
jerarquía de clases, lo cual no es cierto.

En [la especificación de Java](http://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html) se define una top-level
class como aquella que no está anidada:

&gt; A top level class is a class that is not a nested class.
&gt;
&gt; A nested class is any class whose declaration occurs within the body of another class or interface.

Por lo tanto el término top-level hace referencia a la posición de la clase en el código, *no* en la jerarquía de
clases.
</t>
<t tx="vicent.20220623201230.1">## Modificadores de no-acceso

Proporcionan información a la JVM acerca de una clase, mètodo o variable. Hay siete:

- final: it indicates that the specific class cannot be extended or a method cannot be overridden.
- static: it means that the entity to which it is applied is available outside any particular instance of the class. 
  That means the static methods or the attributes are a part of the class and not an object.
- abstract: it is used to declare a class as partially implemented means an object cannot be created directly from that 
  class. Any subclass needs to be either implement all the methods of the abstract class, or it should also need to be 
  an abstract class. The abstract keyword cannot be used with static, final, or private keywords because they prevent 
  overriding, and we need to override methods in the case of an abstract class
- synchronized: synchronized keyword prevents a block of code from executing by multiple threads at once. It is very 
  important for some critical operations.
- volatile: the volatile keyword is used to make a class thread-safe. That means if a variable is declared as volatile, 
  then that can be modified by multiple threads at the same time without any issues. The volatile keyword is only 
  applicable to a variable. 
- transient: This needs prior knowledge of serialization in Java. You can refer to the following article for that:- 
  serialization in java. The transient keyword may be applied to member variables of a class to indicate that the 
  member variable should not be serialized when the containing class instance is serialized. Serialization is the ​
  process of converting an object into a byte stream. When we do not want to serialize the value of a variable, then we 
  declare it as transient.
- native: The native keyword may be applied to a method to indicate that the method is implemented in a language other 
  than Java.
  
</t>
<t tx="vicent.20220725083209.1">## Basic syntax

[Baeldung](https://www.baeldung.com/java-syntax)

Primitive types are the basic data types that store simple data.

Reference types are objects that contain references to values and/or other objects.

An identifier is a name of any length, consisting of letters, digits, underscore, and dollar sign (cannot start with a 
number).

The main difference in representing literal values of char and String is the number of quotes that surrounds the 
values.

Arrays declaration type[] identifier = new type[length]; array indexes start at zero

The basic unit of a Java program is a Class.

For a Class to be executable, it must have a main method. The main method signifies the entry point of the program.
Executable means it can be executed via the `java` command.

</t>
<t tx="vicent.20220725085429.1">## Java primitives

[Baeldung](https://www.baeldung.com/java-primitives)

The eight primitives defined in Java are int, byte, short, long, float, double, boolean and char. These aren't considered
objects and represent raw values. They're stored directly on the [stack](https://www.guru99.com/stack-vs-heap.html).

The simplest primitive data type is boolean. It can contain only two values: true or false. It stores its value in a 
single bit. However, for convenience, Java pads the value and stores it in a single byte.

Overflow: The primitive data types have size limits. But what happens if we try to store a value that's larger than the 
maximum value? We run into a situation called *overflow*. When an integer overflows, it rolls over to the minimum value 
and begins counting up from there. Floating point numbers overflow by returning `Infinity`.

Underflow is the same issue except it involves storing a value smaller than the minimum value. When the numbers 
underflow, they return 0.0.
</t>
<t tx="vicent.20220726084801.1">## Java initialization

[Baeldung](https://www.baeldung.com/java-initialization)

All objects in Java are stored in our program's heap memory. In fact, the heap represents a large pool of unused 
memory, allocated for our Java application.</t>
<t tx="vicent.20220726085534.1">## Get Started with Java

[Get started](https://www.baeldung.com/get-started-with-java-series)
[Back to basics](https://www.baeldung.com/java-tutorial)

Muy buena introducción al lenguaje Java.</t>
<t tx="vicent.20220728104604.1">## Clases abstractas

[baeldung](https://www.baeldung.com/java-abstract-class)

Before diving into when to use an abstract class, let's look at their most relevant characteristics:

- We define an abstract class with the `abstract` modifier preceding the `class` keyword
- An abstract class can be subclassed, but it can't be instantiated
- If a class defines one or more abstract methods, then the class itself must be declared abstract
- An abstract class can declare both abstract and concrete methods
- A subclass derived from an abstract class must either implement all the base class's abstract methods or be abstract itself
- abstract methods must have the `abstract` modifier (diferencia con las interfaces)
- methods can be `protected` (diferencia con las interfaces)
- Classes in Java support single inheritance; they can't extend multiple classes.
- Also, note that in the absence of an extends keyword, a class implicitly inherits class java.lang.Object.
- A subclass class inherits the non-static protected and public members from the superclass class. In addition, the 
  members with default (package-private) access are inherited if the two classes are in the same package.
- On the other hand, the private and static members of a class are not inherited.
</t>
<t tx="vicent.20220729085936.1">## Clases abstractas vs Interfaces

A veces es difícil decidir si usar una clase abstracta o una interface.

Como regla de oro podemos decir que usaremos una clase abstracta cuando hay funcionalidad que queremos heredar. Si lo
que buscamos no es heredar sino implementar una determinada funcionalidad entonces usaremos interfaces.

Por ejemplo:

~~~ java
public abstract class BaseFileReader {
    protected Path filePath;
    protected BaseFileReader(Path filePath) {
        this.filePath = filePath;
    }
    
    public Path getFilePath() {
        return filePath;
    }

    public List&lt;String&gt; readFile() throws IOException {
        return Files.lines(filePath)
          .map(this::mapFileLine).collect(Collectors.toList());
    }

    protected abstract String mapFileLine(String line);
}
//
public class LowercaseFileReader extends BaseFileReader {
    public LowercaseFileReader(Path filePath) {
        super(filePath);
    }

    @Override
    public String mapFileLine(String line) {
        return line.toLowerCase();
    }   
}
//
public class UppercaseFileReader extends BaseFileReader {
    public UppercaseFileReader(Path filePath) {
        super(filePath);
    }

    @Override
    public String mapFileLine(String line) {
        return line.toUpperCase();
    }
}
~~~

Vemos como las subclases heredan una determinada funcionalidad (métodos concretos de la clase base) y la extienden con 
su propia implementación de los métodos abstractos.

En cambio con una interface podemos añadir un determinado comportamiento a clases que no están relacionadas entre ellas
(por lo que no heredan unas de otras y no tiene sentido usar clases abstractas). Por ejemplo, la interface
`Comparator` la implementan los tipos `Integer` y `String` (entre otros) y podemos usarla en nuestros propios tipos:

~~~ java
public class Employee {

    private double salary;

    public double getSalary() {
        return salary;
    }

    public void setSalary(double salary) {
        this.salary = salary;
    }
}
//
public class EmployeeSalaryComparator implements Comparator&lt;Employee&gt; {

    @Override
    public int compare(Employee employeeA, Employee employeeB) {
        if (employeeA.getSalary() &lt; employeeB.getSalary()) {
            return -1;
        } else if (employeeA.getSalary() &gt; employeeB.getSalary()) { 
            return 1;
        } else {
            return 0;
        }
    }
}
~~~


</t>
<t tx="vicent.20220729110533.1">## Interfaces

[baeldung](https://www.baeldung.com/java-interfaces)

In Java, an interface is an *abstract type* that contains a collection of methods and constant variables.

~~~ java
public interface Electronic {
    // Constant variable
    String LED = "LED";

    // Abstract method
    int getElectricityUse();

    // Static method
    static boolean isEnergyEfficient(String electtronicType) {
        if (electtronicType.equals(LED)) {
            return true;
        }
        return false;
    }

    //Default method
    default void printDescription() {
        System.out.println("Electronic Description");
    }
}
~~~

Una interface puede contener:

- nada
- constantes (por definición las variables son `public static final` y esto no puede cambiarse)
- métodos abstractos
- métodos concretos que tengan el modificador `static` o `default`
- los métodos no pueden ser `protected` o `final` pero pueden ser `private` [baeldung](https://www.baeldung.com/java-interface-private-methods)

Las interfaces son tipos abstractos por definición: al crear una interface no necesitamos añadir el modificador 
`abstract`, el compilador lo hace por nosotros. Lo mismo ocurre con los métodos abstractos.

We can implement an interface in a Java class by using the `implements` keyword.

~~~ java
public class Computer implements Electronic {

    @Override
    public int getElectricityUse() {
        return 1000;
    }
}
~~~

Con interfaces podemos:

- implementar un determinado comportamiento
- conseguir herencia múltiple (implementando varias interfaces al mismo tiempo)
- conseguir polimorfismo (recordemos que las interfaces *son tipos*)

~~~ java
List&lt;Shape&gt; shapes = new ArrayList&lt;&gt;();  // Shape es una interface
Shape circleShape = new Circle();  // Circle es una clase que implementa Shape
Shape squareShape = new Square();  // Square es una clase que implementa Shape

shapes.add(circleShape);
shapes.add(squareShape);

for (Shape shape : shapes) {
    System.out.println(shape.name());  // BOOM! Polimorfismo en acción
}
~~~

```{note} An interface inherits other interfaces by using the keyword `extends`. Classes use the keyword `implements` to
inherit an interface.
```
</t>
<t tx="vicent.20220729124948.1">## Herencia de tipos

[baeldung](https://www.baeldung.com/java-inheritance)

*When a class inherits another class or interfaces, apart from inheriting their members, it also inherits their type. 
This also applies to an interface that inherits other interfaces.*

This is a very powerful concept, which allows developers to program to an interface (base class or interface), rather 
than programming to their implementations.

For example, imagine a condition, where an organization maintains a list of the cars owned by its employees. Of course, 
all employees might own different car models. So how can we refer to different car instances? Here's the solution:

~~~ java
public class Employee {
    private String name;
    private Car car;
    
    // standard constructor
}
~~~

Because all derived classes of Car inherit the type Car, the derived class instances can be referred by using a variable of class Car:

~~~ java
Employee e1 = new Employee("Shreya", new ArmoredCar());
Employee e2 = new Employee("Paul", new SpaceCar());
Employee e3 = new Employee("Pavni", new BMW());
~~~
</t>
<t tx="vicent.20220801182538.1">## Clases y objetos

[baeldung](https://www.baeldung.com/java-classes-objects)
</t>
<t tx="vicent.20220801184823.1">## Herencia, composición y dependency injection

[baeldung](https://www.baeldung.com/java-inheritance-composition)
[wikipedia](https://en.wikipedia.org/wiki/Dependency_injection)
</t>
<t tx="vicent.20220801204841.1">## JVM, JRE y JDK

[baeldung](https://www.baeldung.com/jvm-vs-jre-vs-jdk)

JVM es una máquina virtual capaz de ejecutar programas en Java.

JRE es una implementación de la JVM.

JDK es un entorno completo de desarrollo de aplicaciones Java que incluye:

- un JRE
- herramientas de desarrollo

  - básicas
  - de seguridad
  - de internacionalización
  - RMI
  - IDL
  - de despliegue
  - Java Plug-in
  - Java Web Start
  - monitorización
  - troubleshooting
</t>
<t tx="vicent.20220801211535.1">## JEE

[baeldung](https://www.baeldung.com/java-enterprise-evolution)
</t>
<t tx="vicent.20220806092453.1">## Overloading vs Overriding

[baeldung](https://www.baeldung.com/java-method-overload-override)

Overloading: dentro de la misma clase definimos varios métodos con el mismo nombre pero diferente firma:

- número diferente de argumentos
- mismo número de argumentos pero distinto tipo
- no se permiten varios métodos que difieran solamente en el tipo del valor de retorno

```{note} Promoción de tipos: si se invoca un método y el tipo de los parámetros no coincide con el de los argumentos
entonces, si se puede, se hace promoción de tipos:

    byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double
    char -&gt; int -&gt; long -&gt; float -&gt; double
```

Un tipo puede promocionar a cualquiera de los tipos de su derecha, por ejemplo, si tengo un método:

~~~~ java
public String samplemethod(float index)
~~~~

lo puedo invocar como:

~~~~ java
samplemethod('f')
~~~~

y el argumento de tipo `char` se convertirá automáticamente en `float`.

```{note} Sustitución de tipos: el LSP (Liskov Substituion Principle) afirma que si una aplicación funciona correctamente con un tipo base también
debe hacerlo con cualquiera de sus subtipos.
```

Overriding: un método implementado en un clase base se reimplementa *no necesariamente con la misma firma* en un 
subclase para conseguir un comportamiento personalizado. *El overriding debe usarse con cuidado porque no siempre cumple
el LSP*.

Of course, it's valid to make an overridden method to accept arguments of different types and return a different type as
well, but with full adherence to these rules:

- If a method in the base class takes argument(s) of a given type, the overridden method should take the same type or a supertype (a.k.a. contravariant method arguments)
- If a method in the base class returns void, the overridden method should return void
- If a method in the base class returns a primitive, the overridden method should return the same primitive
- If a method in the base class returns a certain type, the overridden method should return the same type or a subtype (a.k.a. covariant return type)
- If a method in the base class throws an exception, the overridden method must throw the same exception or a subtype of the base class exception

```{note} Binding: el binding es la asociación de una llamada a un método con el cuerpo de dicho método. Se puede hacer
de manera estática (en tiempo de compilación) o dinámica (en tiempo de ejecución).
```

En el caso de sobrecarga de métodos el binding es estático. En el caso de sobreescritura, es dinámico, porqué implica
herencia y una jerarquía de tipos y el compilador no es capaz de determinar en tiempo de compilación que método hay
que llamar. Para saberlo el compilador tiene que comprobar el tipo del objeto que está invocando al método y esa
comprobación se hace en tiempo de ejecución.
</t>
<t tx="vicent.20220806115156.1">## El modificador `static`

[baeldung](https://www.baeldung.com/java-static)

Dentro de una clase, un método no estático puede acceder *directamente* a cualquier variable/método de esa clase (ya sea 
estático o no). Pero los métodos estáticos solo pueden acceder *directamente* a variables/métodos estáticos. *Si quieren
acceder a miembros no estáticos tienen que hacerlo a través de una instancia de esa clase*.

Los métodos estáticos no se pueden sobreescribir porque se resuelven en tiempo de compilación.
</t>
<t tx="vicent.20220806180544.1">## Modificador `final`

[baeldung](https://www.baeldung.com/java-final)

`final` se puede usar en:

- clases
- variables (estáticas y no estáticas)
- métodos
- argumentos de métodos
</t>
<t tx="vicent.20220806180756.1">## Enums

</t>
<t tx="vicent.20220821093743.1">## API

Cuando se habla de APIs (Application Program Interface) se puede hacer en dos contextos diferentes: lenguajes de 
programación y comunicación entre ordenadores dentro de una red.

Dentro de un lenguaje de programación, una API proporciona al lenguaje herramientas para obtener determinada 
funcionalidad que va más alla del propio lenguaje. Por ejemplo, en Java la API proporcionada por el paquete Java.String 
proporciona una serie de métodos/facilidades que permiten manipular objetos tipo String de manera sencilla y potente. 
Java proporciona muchas APIs al desarrollador a través de multitud de paquetes. Lo mismo ocurre, por ejemplo, con Python
(batteries included) donde cada uno de sus numerosos módulos estándar es una API que facilita el uso de determinada 
funcionalidad (trabajo con ficheros, logs, estructuras de datos...).

Estas APIs están disponibles a través de clases, bibliotecas, DLLs, etc. (podemos pensar que la API es la especificación 
de la funcionalidad mientras que la biblioteca es la implementación).

En el contexto de comunicación en red, una API web o servicio web es un componente de software al que se puede acceder
a través de una dirección web. *La API web permite la comunicación entre dos sistemas conectados en red*. En el mundo de
Internet se han popularizado enormemente, ya se trate de web services públicos o privados. Generalmente, la interacción 
se basa en el envío por HTTP de mensajes (solicitudes y respuestas) entre un cliente y un servidor, que incluyen datos. 

Here is how an API works:

- A client application initiates an API call to retrieve information—also known as a request. This request includes a 
request verb, headers, and sometimes, a request body. The request will be sent to the web server via the API's Uniform 
Resource Identifier (URI).
- After receiving a valid request, the API makes a call to the external program or web server.
- The server sends a response to the API with the requested information.
- The API transfers the data to the initial requesting application.

While the data transfer will differ depending on the web service being used, this process of requests and response all 
happens through an API. Whereas a user interface is designed for use by humans, APIs are designed for use by a computer 
or application.

Hay muchos ejemplos de APIs web: una web de servicios de entrega puede tener una API que permita a una web de 
e-commerce consultar y añadir automáticamente el coste de entrega al precio de un producto. De esta manera el 
desarrollador de la web del e-commerce no tiene que añadir y mantener a su BBDD una tabla con los precios de la empresa 
de repartos. Developers don't need to know how an API is implemented; they simply use the interface to communicate with 
other products and services. Vemos que la API facilita la vida al desarrollador, no está orientada al usuario final (si 
un cliente compra un producto en Amazon y el producto se va a entregar por DHL, el coste de la entrega se añade al precio del 
producto y eso es lo que ve el comprador. Si el incremento de precio se ha llevado a cabo con una API o si lo ha
implementado desde cero el desarrollador es transparente para el usuario final). Otros ejemplos de APIs son:

- universal logins: permiten hacer login en una aplicación usando las credenciales de otra. Esto ahorra al usuario la
necesidad de tender unas credenciales distintas para cada aplicación.
- procesamiento de pagos por terceros: esto permite pagar en Internet usando servicios como PayPal, sin tener que
introducir datos bancarios para realizar la transacción
- comparadores de precios para viajes: las APIs permiten acceder a las diferentes web de viajes, obtener los precios y
luego agregarlos a la web del comparador
- Google Maps: las APIs le permiten mostrar multitud de información asociada a las rutas de viaje (todo tipo de 
servicios , como información del tráfico en tiempo real, restaurantes, gasolineras, peluquerías...)
- Twitter: los Tweets públicos y sus respuestas están disponibles a través de una API que permite hacer búsquedas.
Además los desarrolladores pueden publicar Tweets a través de otra API

Para que un desarrollador pueda usar cierta API web tiene que tener acceso a ella. Desde el punto de vista del acceso
hay varios tipos de API web:

- abiertas o públicas: están escritas en código abierto y los endpoint son públicos
- de socios: solo disponibles para socios estratégicos de una empresa. Los desarrolladores necesitan autenticarse para
acceder a ellas
- internas o privadas: solo disponibles para los desarrolladores de la empresa
- compuestas: permiten a los desarrolladores acceder a varios endpoint con una sola llamada. Útiles en arquitectura de
microservicios

Una API web suele utilizar uno de los siguientes protocolos para el intercambio de mensajes:

- SOAP: construido en XML, utiliza HTTP como capa de transporte. Es independiente del sistema operativo y del lenguaje
- XML-RPC: más sencillo y ligero (y antigüo) que SOAP, pero menos potente
- JSON-RPC: como el XML-RPC pero usa JSON en lugar de XML
- REST: no es un protocolo ni un estándar sino un conjunto de principios de uso de arquitectura. Si una API web usa esos
principios se dice que es una API REST

Las APIs web han evolucionado con el tiempo:

- primero fue el protocolo SOAP
- luego llegaron las API REST

WSDL is an XML notation for describing a web service. A WSDL definition tells a client how to compose a web service 
request and describes the interface that is provided by the web service provider. A WSDL definition is divided into 
separate sections that specify the logical interface and the physical details of a web service. The physical details 
include both endpoint information, such as HTTP port number, and binding information, which specifies how the SOAP 
payload is represented and which transport is used.

</t>
<t tx="vicent.20220822180035.1">## Lo que hay que entender de este tema

```{note} Un web service (a.k.a. API web) es un componente de software accesible en una dirección web (llamada 
`endpoint`). Permite que dos sistemas conectados en red se comuniquen entre sí mediante el intercambio de mensajes. 
Este intercambio se puede llevar a cabo usando protocolos estándar (normalmente SOAP) o con unas reglas menos estrictas 
(como en las APIs REST).

A grandes rasgos el intercambio de mensajes funciona así:

- el cliente envía una petición al endpoint
- la petición se valida en el endpoint y, si es correcta, se envía al servidor
- el servidor envía la respuesta al endpoint
- la respuesta se valida en el endpoint y, si es correcta, se envía al cliente

La arquitectura SOA tiene como objetivo descomponer/separar una aplicación en servicios web independientes. La 
separación se hace en base a la lógica de negocio, por eso se dice que SOA tiene enfoque de empresa.
```
</t>
<t tx="vicent.20220827084532.1">## Streams

[Streams](https://www.baeldung.com/java-8-streams-introduction)

Los streams permiten trabajar con flujos/secuencias de elementos.

Un stream se crea a partir de un data provider (normalmente un array o una colección).

~~~ java
String[] arr = new String[] {"hola", "adios"};
Stream&lt;String&gt; stream = Arrays.stream(arr);  // Stream a partir de un array
stream = list.stream();                      // Stream a partir de una colección
stream = Stream.of("a", "b", "c");           // Stream a partir de un literal
stream = Stream.empty();                     // crea un stream vacío
~~~

Las operaciones con streams se agrupan en:

- intermedias: devuelven un Stream&lt;T&gt;, se pueden encadenar.
- terminales: devuelven un resultado de un determinado tipo. Como no devuelven un stream no se pueden seguir encadenando
  con operaciones intermedias.

~~~ java
long count = list.stream().distinct().count();
~~~

Los streams se pueden iterar con bucles for, foreach, while... pero tambien con métodos propios que ponen énfasis en
la operación que se realiza sobre los elementos en cada iteración, obviando los detalles de como se realiza la 
iteración (no hace falta usar índices, contadores...). Normalmente las operaciones sobre los elementos se hacen con
expresiones lambda. Por ejemplo:

~~~ java
/* Matching */
boolean isValid = list.stream().anyMatch(element -&gt; element.contains("h")); // true
boolean isValidOne = list.stream().allMatch(element -&gt; element.contains("h")); // false
boolean isValidTwo = list.stream().noneMatch(element -&gt; element.contains("h")); // false

/* Mapping */
List&lt;String&gt; uris = new ArrayList&lt;&gt;();
uris.add("C:\\My.txt");
Stream&lt;Path&gt; stream = uris.stream().map(uri -&gt; Paths.get(uri));      // convert Stream&lt;String&gt; to Stream&lt;Path&gt;

List&lt;Detail&gt; details = new ArrayList&lt;&gt;();
details.add(new Detail());
Stream&lt;String&gt; stream
  = details.stream().flatMap(detail -&gt; detail.getParts().stream());

/* Filtering */
Stream&lt;String&gt; stream = list.stream().filter(element -&gt; element.contains("d"));

/* Reduction */
List&lt;Integer&gt; integers = Arrays.asList(1, 1, 1);
Integer reduced = integers.stream().reduce(23, (a, b) -&gt; a + b);

/* Collecting ??? */
~~~

Importante:

- Java NIO class `Files` allows us to generate a `Stream&lt;String&gt;` of a text file through the `lines()` method. Every 
line of the text becomes an element of the stream
- We can instantiate a stream, and have an accessible reference to it, as long as only intermediate operations are 
  called. Executing a terminal operation makes a stream inaccessible. This kind of behavior is logical. We designed 
  streams to apply a finite sequence of operations to the source of elements in a functional style, not to store 
  elements.




</t>
<t tx="vicent.20220827121231.1">## Collectors

[Collectors](https://www.baeldung.com/java-8-collectors)

[Definiciones útiles](https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#Reduction):

- A reduction operation (also called a fold) takes a sequence of input elements and combines them into a single summary 
  result by repeated application of a combining operation, such as finding the sum or maximum of a set of numbers. The 
  streams classes have a general reduction operation, called `reduce()`, as well as multiple specialized reduction 
  forms such as `sum()`, `max()`, or `count()`.
- A mutable reduction operation accumulates input elements into a mutable result container, such as a Collection or 
  StringBuilder, as it processes the elements in the stream. The streams classes have a general reduction operation, 
  called `collect()`

A collect operation requires three functions: a supplier function to construct new 
instances of the result container, an accumulator function to incorporate an input element into a result container, 
and a combining function to merge the contents of one result container into another. The three aspects of collect
 -- supplier, accumulator, and combiner -- are tightly coupled. We can use the abstraction of a Collector to capture 
 all three aspects.

```{note} Un colector es un método que convierte un Stream en algún tipo de colección (List, Set, Map) y, 
opcionalmente, realiza alguna operación sobre la colección.
```

All predefined implementations can be found in the Collectors class. It's common practice to use the following static 
import with them to leverage increased readability:

~~~ java
import static java.util.stream.Collectors.*;
//We can also use single import collectors of our choice:

import static java.util.stream.Collectors.toList;
import static java.util.stream.Collectors.toMap;
import static java.util.stream.Collectors.toSet;
~~~

Ejemplos de uso:

~~~ java
List&lt;String&gt; result = givenList.stream()
  .collect(toList());

Set&lt;String&gt; result = givenList.stream()
  .collect(toSet());

Map&lt;String, Integer&gt; result = givenList.stream()
  .collect(toMap(Function.identity(), String::length));
~~~

`Function.identity()` is just a shortcut for defining a function that accepts and returns the same value.

`givenList.stream()` transforma una lista en un stream. `stream.collect(toList())` convierte el stream en una
colección usando el colector `toList()`. When using the `toSet` and `toList` collectors, we can't make any assumptions 
of their implementations. If we want to use a custom implementation, we'll need to use the toCollection collector with 
a provided collection of our choice.

~~~ java
List&lt;String&gt; result = givenList.stream()
  .collect(toCollection(LinkedList::new))
~~~

With the collect() method we can [non-mutable] reduction operations too using Collectors methods (`joining`, 
`averagingInt`).</t>
<t tx="vicent.20220828080628.1">### Pipeline

[pipeline](https://www.baeldung.com/java-8-streams#pipeline)

To perform a sequence of operations over the elements of the data source and aggregate their results, we need three 
parts: the source, intermediate operation(s) and a terminal operation.

Intermediate operations return a new modified stream. If we need more than one modification, we can chain intermediate 
operations. 

A stream by itself is worthless; the user is interested in the result of the terminal operation, which can be a value 
of some type or an action applied to every element of the stream. We can only use one terminal operation per stream.

The correct and most convenient way to use streams is by a stream pipeline, which is a chain of the stream source, 
intermediate operations, and a terminal operation:

~~~ java
List&lt;String&gt; list = Arrays.asList("abc1", "abc2", "abc3");
long size = list.stream().skip(1)
  .map(element -&gt; element.substring(0, 3)).sorted().count();
~~~

From the performance point of view, the right order is one of the most important aspects of chaining operations in the 
stream pipeline: intermediate operations which reduce the size of the stream should be placed before operations which 
are applying to each element. So we need to keep methods such as `skip()`, `filter()`, and `distinct()` at the 
[vertical] top of our stream pipeline.


In most of the code samples shown in this article, we left the streams unconsumed (we didn't apply the `close()` method 
or a terminal operation). In a real app, *don't leave an instantiated stream unconsumed, as that will lead to memory 
leaks*.</t>
<t tx="vicent.20220829094958.1">## Java IO: Consola

[baeldung](https://www.baeldung.com/java-console-input-output)

La entrada estándar en Java es el stream System.in, y la salida estándar es el stream System.out. Por defecto, usamos el teclado para
escribir datos en System.in y la pantalla para leer datos de System.out.

Para leer datos (que hemos introducido previamente con el teclado) de System.in usamos la clase Scanner:
- Scanner.nextLine() lee una línea entera de datos y la almacena en un String
- Scanner.nextXXX() lee un token e intenta almacenarlo en una variable de tipo XXX

La idea es que entramos datos a System.in con el teclado y los recuperamos con la clase Scanner.

~~~ java
// Java program to read data of various types using Scanner class.
import java.util.Scanner;
public class ScannerDemo1
{
	public static void main(String[] args)
	{
		// Declare the object and initialize with
		// predefined standard input object
		Scanner sc = new Scanner(System.in);

		// String input
		String name = sc.nextLine();

		// Character input
		char gender = sc.next().charAt(0);

		// Numerical data input
		// byte, short and float can be read
		// using similar-named functions.
		int age = sc.nextInt();
		long mobileNo = sc.nextLong();
		double cgpa = sc.nextDouble();

		// Print the values to check if the input was correctly obtained.
		System.out.println("Name: "+name);
		System.out.println("Gender: "+gender);
		System.out.println("Age: "+age);
		System.out.println("Mobile Number: "+mobileNo);
		System.out.println("CGPA: "+cgpa);
    sc.close();
	}
}
~~~

Input correcto:
John Doe
Female 20 645645645 5.6 pepe

Input erróneo:
Pedro Picapiedra
Female 20.1 645645645 60

Después de leer la primera línea necesitamos al menos cuatro tokens. Los podemos introducir todos en una línea (como hemos hecho 
arriba) o usando varias líneas (cuatro líneas de un token, dos líneas de dos tokens, etc.).

Para escribir al System.out usamos println() o print().

En general el mecanismo es: 

- escribo datos a un stream (con el teclado escribo en System.in, con println() escribo en System.out)
- recupero datos del stream (con los métodos nextXXX() de System.in, con la pantalla de System.out)

Otra posibilidad es usar la clase System.Console.

- Console.readline(msg): escribe el mensaje msg a System.out y lee una línea de System.in.
- Console.readPassword(msg)
- Console.printf(msg)
</t>
<t tx="vicent.20220829114442.1">## Java IO: files

Podemos crear un fichero de muchas maneras:

~~~ java
private final String FILE_NAME = "src/test/resources/fileToCreate.txt";

// Method 1 uses Java IO File objects
File newFile = new File(FILE_NAME);
boolean success = newFile.createNewFile();  //Devuelve false si el fichero ya existe

// Method 2 uses Java NIO Files objects
Path newFilePath = Paths.get(FILE_NAME);
Files.createFile(newFilePath);  // FileAlreadyExistsException si el fichero ya existe

// Method 3 uses Stream objects
try(FileOutputStream fileOutputStream = new FileOutputStream(FILE_NAME)){  // Si el fichero ya existe lo sobreescribe
    }
~~~

El método 2 es el que mejor maneja las excepciones.

Podemos leer y escribir un fichero de muchas maneras. Algunas de ellas son:

[leer](https://www.baeldung.com/reading-file-in-java)
[escribir](https://www.baeldung.com/java-write-to-file)


Si queremos leer/escribir texto lo más sencillo es usar BufferedReader y BufferedWriter:

~~~ java
String file ="src/test/resources/fileTest.txt";

BufferedReader reader = new BufferedReader(new FileReader(file, "UTF-8"));
String currentLine = reader.readLine();
reader.close();

// write to a new file
String str = "Hello";
BufferedWriter writer = new BufferedWriter(new FileWriter(fileName));
writer.write(str);
writer.close();

// write to an existing file
String str = " world!";
BufferedWriter writer = new BufferedWriter(new FileWriter(fileName, true));
writer.append(str);
writer.close();
~~~

Si queremos escribir texto con formato usamos PrintWriter:

~~~ java
FileWriter fileWriter = new FileWriter(fileName);
PrintWriter printWriter = new PrintWriter(fileWriter);  // can use FileWriter, BufferedWriter or System.out
printWriter.print("Some String");
printWriter.printf("Product name is %s and its price is %d $", "iPhone", 1000);
printWriter.close();
~~~

Si queremos leer/escribir secuencias de bytes (i.e. ficheros binarios, como una imagen), lo más sencillo es usar
FileInputStream y FileOutputStream:

~~~ java
String str = "Hello";
FileInputStream inputStream = new FileInputStream(fileName);
int ch;
while(ch = inputStream.read() != -1) {System.out.println(ch)}
inputStream.close();

String str = "Hello";
FileOutputStream outputStream = new FileOutputStream(fileName);
byte[] strToBytes = str.getBytes();
outputStream.write(strToBytes);
outputStream.close();
~~~

Con Java NIO (fichero pequeño, lo guardamos entero en una variable):

~~~ java
Path path = Paths.get("src/test/resources/fileTest.txt");

List&lt;String&gt; lines = Files.readAllLines(path);
~~~

Con Java NIO (fichero grande, usamos un buffer):

~~~ java
Path path = Paths.get("src/test/resources/fileTest.txt");

BufferedReader reader = Files.newBufferedReader(path);
String line = reader.readLine();
~~~

Con Java NIO Files.lines():

~~~ java
Path path = Paths.get(getClass().getClassLoader()
  .getResource("fileTest.txt").toURI());
      
Stream&lt;String&gt; lines = Files.lines(path);
String data = lines.collect(Collectors.joining("\n"));
lines.close();
~~~

También podemos leer con una instancia de Scanner:

~~~ java
String file = "src/test/resources/fileTest.txt";
Scanner scanner = new Scanner(new File(file));
scanner.useDelimiter(" ");
String word;
while(scanner.hasNext()){
  word = scanner.next();
}
scanner.close();
~~~

Aún quedan cosas que ver: random access para I/O, creación de ficheros temporales, bloqueo de ficheros, NIO API...

Un FileChannel es un canal de bytes conectado a un fichero. Un canal mantiene una posición (la posición actual) y permite cambiarla.</t>
<t tx="vicent.20220830100950.1">## Java IO: concepts

[baeldung](https://www.baeldung.com/java-outputstream)

The Java IO API which defines classes required to perform I/O operations in Java. These are all packaged in the java.io namespace. This 
is one of the core packages available in Java since version 1.0.

Starting Java 1.4, we also have Java NIO packaged in the namespace java.nio which enables non-blocking input and output operations. 

Details related to Java IO and Java NIO can be found [here](https://docs.oracle.com/javase/8/docs/technotes/guides/io/index.html).

*Java IO basically provides a mechanism to read data from a source and write data to a destination. Input represents the source while 
output represents the destination here.*

These sources and destinations can be anything from Files, Pipes to Network Connections.

Java IO provides the concept of **streams** which basically represents a *continuous flow of data*. Streams can support many different 
types of data like bytes, characters, objects, etc.

Moreover, *connection to a source or a destination is what a stream represents*. They hence come as either InputStream or OutputStream 
respectively.

</t>
<t tx="vicent.20220830111952.1">### Buffering

[Como funciona el buffering de escritura?](https://www.baeldung.com/java-outputstream#outputstream-buffering)

Input and output operations typically involve relatively expensive operations like disk access, network activity, etc. Performing this 
often can make a program less efficient.

We have “buffered streams” of data in Java to handle these scenarios. BufferedOutputStream writes data to a buffer instead which is 
flushed to the destination less often, when the buffer gets full (default buffer size is 8K), or the method flush() is called.

BufferedOutputStream extends FilterOutputStream discussed earlier and wraps an existing OutputStream to write to a destination:

~~~ java
public static void bufferedOutputStream(
  String file, String ...data) throws IOException {
 
    try (BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file))) {
        for(String s : data) {
            out.write(s.getBytes());
            out.write(" ".getBytes());
        }
    }
}
~~~

The critical point to note is that every call to write() for each data argument *only writes to the buffer* and does not result in a 
potentially expensive call to the File.

In the case above, if we call this method with data as “Hello”, “World!”, this will only result in data being written to the File when 
the code exits from the try-with-resources block which calls the method close() -which instead calls flush()- on the 
BufferedOutputStream.

This results in an output file with the following text:

Hello World!

[Como funciona el buffering de lectura?](https://www.baeldung.com/java-buffered-reader)

In general, BufferedReader comes in handy if we want to read text from any kind of input source whether that be files, sockets, or 
something else.

Simply put, it enables us to minimize the number of I/O operations by reading chunks of characters and storing them in an internal 
buffer. While the buffer has data, the reader will read from it instead of directly from the underlying stream. Por defecto, 
BufferedReader usa un tamaño de buffer de 8K.

BufferedReader utiliza el patrón Decorator lo que significa que cuando se usa el constructor BufferedReader(Reader) automáticamente se
añade a Reader la capacidad de hacer buffering.

Ejemplos de BufferedReader(Reader):

~~~ java
BufferedReader reader = 
  new BufferedReader(new FileReader("src/main/resources/input.txt"));

BufferedReader reader = 
  new BufferedReader(new InputStreamReader(System.in));

BufferedReader reader = 
           new BufferedReader(new StringReader("1__2__3__4__5"));

BufferedReader reader = 
  Files.newBufferedReader(Paths.get("src/main/resources/input.txt"))
~~~
</t>
<t tx="vicent.20220831101942.1">## String -bytes conversion

[baeldung](https://www.baeldung.com/java-string-to-byte-array)

A String is stored as an array of Unicode characters in Java. To convert it to a byte array, we translate the sequence of 
characters into a sequence of bytes. For this translation, we use an instance of Charset. This class specifies a mapping between a 
sequence of chars and a sequence of bytes.

We refer to the above process as encoding.

~~~ java
String inputString = "Hello World!";
byte[] byteArrray = inputString.getBytes();   // use the default charset which is system-dependent
byte[] byteArrray = inputString.getBytes("IBM01140");  // use a named charset
byte[] byteArrray = inputString.getBytes(Charset.forName("ASCII"));  // use an instance of Charset
byte[] byteArrray = inputString.getBytes(StandardCharsets.UTF_16);  // use a standard charset

String inputString = "Hello ਸੰਸਾਰ!";
Charset charset = StandardCharsets.US_ASCII;
byte[] byteArrray = charset.encode(inputString).array();

CharsetEncoder encoder = StandardCharsets.US_ASCII.newEncoder();  // this provides fine-grained control over the encoding process
encoder.onMalformedInput(CodingErrorAction.IGNORE)
  .onUnmappableCharacter(CodingErrorAction.REPLACE)
  .replaceWith(new byte[] { 0 });

byte[] byteArrray = encoder.encode(CharBuffer.wrap(inputString))
                      .array();
~~~

We refer to the process of converting a byte array to a String as decoding. Similar to encoding, this process requires a Charset.

However, we can't just use any charset for decoding a byte array. In particular, we should use the charset that encoded the String 
into the byte array.

~~~ java
String charsetName = "IBM01140";
byte[] byteArrray = { -56, -123, -109, -109, -106, 64, -26, -106,
  -103, -109, -124, 90 };

String string = new String(byteArrray, charsetName);
    
assertEquals("Hello World!", string);
...
~~~
</t>
<t tx="vicent.20220831110352.1">API REST - Spring Boot
Primefaces
Junit
Metodología ágiles
SQL (lenguaje y teoría)
GIT
Tomcat
</t>
<t tx="vicent.20220901104803.1">## GIT. Conceptos básicos

[Tutoriales](https://linuxize.com/tags/git/)

Conceptos importantes:

Un **snapshot** es una copia del repositorio en un momento dado. En Pro Git pág. 82 se explica en detalle como se almacena en el 
snapshot cada directorio y fichero del repositorio.

Un **commit** es un objeto que apunta a un snapshot del repositorio y a cada uno de los commits padre. El commit contiene metadatos 
como autor, commiter, email, mensaje... El commit, como todo en git, tiene un checksum para garantizar su integridad.

staging area: a place where people gather before going somewhere or doing something

En git la **staging area** es donde se almacenan los ficheros cuando estan listos para añadirse a un nuevo snapshot.

El ciclo de trabajo básico en git es:

- editar ficheros
- añadir los ficheros modificados a la staging area
- hacer commit del contenido de la staging area i.e., crear un nuevo snapshot



Una **rama** es un puntero movible que apunta *al último commit* de una línea de desarrollo.

A branch represents an independent line of development. Branches serve as an abstraction for the edit/stage/commit process. You can 
think of them as *a way to request a brand new working directory, staging area, and project history*. New commits are recorded in the 
history for the current branch, which results in a fork in the history of the project.

**HEAD** es un puntero que apunta a la rama en uso.

Hacer un **checkout** es moverse de un commit a otro en el árbol de commits. Como efecto colateral se actualiza el estado de nuestro directorio
  de trabajo al que tenía en el nuevo commit. La información va desde el repositorio al directorio de trabajo

**Hacer commit** es añadir el contenido de la staging area al repositorio en un nuevo commit.

Cuando intercambiamos datos con un repositorio remoto:

- hacer push: añadir el commit local al repositorio remoto
- hacer fetch: descargar commits desde el repositorio remoto
- hacer pull: hacer fecth + merge

</t>
<t tx="vicent.20220902132213.1">## Remotos

[Remotos](https://linuxize.com/post/how-to-remove-git-remotes/)

Git remote is a pointer that refers to another copy of the repository that is usually hosted on a remote server.

Every remote has an entry in `.git/config` file, for example:

    [core]
            repositoryformatversion = 0
            filemode = true
            bare = false
            logallrefupdates = true
    [remote "origin"]
            url = https://github.com/leo-editor/leo-editor
            fetch = +refs/heads/*:refs/remotes/origin/*
    [branch "master"]
            remote = origin
            merge = refs/heads/master
    [branch "devel"]
            remote = origin
            merge = refs/heads/devel


To add a remote use the command:

~~~ bash
$ git remote add short-name url
~~~

To list remotes use the command:

~~~ bash
$ git remote -v
origin	ssh://git@github.com/uvemas/ViTables.git (fetch)
origin	ssh://git@github.com/uvemas/ViTables.git (push)
~~~

To remove a remote use the command:

~~~ bash
$ git remote rm short-name
~~~

What the `git remote rm` command does is to remove all references to the remote repository (removing the entries about the remote 
repository from the `.git/config` file). *It does not remove the repository from the remote server*.

To fetch the whole remote repository:

    vicent@Perseus ➤ ~/leo-editor (master) 
    $ git fetch --all 
    Extrayendo origin
    remote: Enumerating objects: 6051, done.
    remote: Counting objects: 100% (5731/5731), done.
    remote: Compressing objects: 100% (1154/1154), done.
    remote: Total 5538 (delta 4701), reused 5204 (delta 4384), pack-reused 0
    Recibiendo objetos: 100% (5538/5538), 994.91 KiB | 646.00 KiB/s, listo.
    Resolviendo deltas: 100% (4701/4701), completado con 159 objetos locales.
    Desde https://github.com/leo-editor/leo-editor
      884b4bca3..5ad7423e2  master      -&gt; origin/master
    * [nueva rama]          6.6.4       -&gt; origin/6.6.4
      c8ff87e51..ee41a5dcb  devel       -&gt; origin/devel
    * [nueva rama]          ekr-clean4  -&gt; origin/ekr-clean4
    * [nueva rama]          ekr-typing2 -&gt; origin/ekr-typing2
    * [nuevo tag]           v6.6.4      -&gt; v6.6.4
    * [nuevo tag]           v6.6.5-devel -&gt; v6.6.5-devel

While the git fetch command will fetch down all the changes on the server
that you don’t have yet, it will not modify your working directory at all. It will
simply get the data for you and let you merge it yourself.

Por tanto, no se han añadidos ramas locales nuevas:

    $ git branch -v
      devel  c50915380 [detrás 1829] Merge pull request #2478 from tbpassin/devel-clean
    * master 5ad7423e2 [detrás 655] Correct link

Ni ha cambiado el estado de las ramas existentes:

    $ git status
    En la rama master
    Tu rama está detrás de 'origin/master' por 655 commits, y puede ser avanzada rápido.
      (usa "git pull" para actualizar tu rama local)

    nada para hacer commit, el árbol de trabajo está limpio

Si queremos actualizar la rama en la que estamos tenemos que mezclarla explícitamente:

    $ git pull
    Actualizando 884b4bca3..5ad7423e2
    Fast-forward
    .mypy.ini                                      |   72 +-
    PKG-INFO.TXT                                   |    2 +-
    README.md                                      |   11 +-
    leo/commands/abbrevCommands.py                 |    6 +-
    leo/commands/bufferCommands.py                 |    6 +-
    leo/commands/checkerCommands.py                |   10 +-
    leo/commands/commanderEditCommands.py          |    3 +-
    leo/commands/commanderFileCommands.py          |    7 +-
    leo/commands/commanderOutlineCommands.py       |   29 +-
    leo/commands/controlCommands.py                |    6 +-
    leo/commands/convertCommands.py                | 1058 ++++++++++++-------------
    leo/commands/editCommands.py                   |   26 +-
    ...

    $ git status
    En la rama master
    Tu rama está actualizada con 'origin/master'.

Y si queremos añadir ramas también tenemos que hacerlo explícitamente:

    $ git checkout 6.6.4
    Rama '6.6.4' configurada para hacer seguimiento a la rama remota '6.6.4' de 'origin'.
    Cambiado a nueva rama '6.6.4'

</t>
<t tx="vicent.20220902135651.1">## Tags

Un tag es una etiqueta que se coloca en un determinado punto de la historia del repositorio (en un determinado commit). Su uso más
habitual es marcar los commit en los que se ha hecho una nueva release del software.

Hay dos tipos de tags:

- ligeros: son simplemente una referencia a un commit específico
- anotados: contienen información adicional (mensaje, tagger name, tagger email, fecha... y tienen checksum)

Si acabamos de hacer un commit  queremos ponerle un tag ligero:

    $ git tag v1.4

Si queremos ponerle un tag anotado:

    $ git tag -a v1.4 -m "my tagging message"

Si queremos poner un tag a un commit en concreto:

    $ git tag -a v1.4 commit_checksum

Si queremos listar los tags:

    $ git tag

Si queremos ver un tag en concreto:

    $ git show v1.4

</t>
<t tx="vicent.20220905143536.1">## Fusión de ramas

(rebase)[https://www.atlassian.com/es/git/tutorials/rewriting-history/git-rebase]
(rebase_grafico)[https://www.gitkraken.com/learn/git/git-rebase]

La fusión de ramas puede hacerse por dos mecanismos:

- merge
- rebase

`merge` es más intuitivo. `rebase` mantiene el historial más fácil de leer porque reemplaza bifurcaciones con cambios lineales.

The easiest way to integrate two branches, as we've already covered, is the merge command. It performs a three-way merge *between the 
two latest branch snapshots (C3 and C4) and the most recent common ancestor of the two (C2)*, creating a new snapshot (and commit).

*Rebasing replays changes from one line of work onto another in the order they were introduced, whereas merging takes the endpoints and 
merges them together.*

Note that the snapshot pointed to by the final commit you end up with, whether it's the last of the rebased commits for a rebase or the 
final merge commit after a merge, is the same snapshot - it's only the history that is different. Rebasing replays changes from one 
line of work onto another in the order they were introduced, whereas merging takes the endpoints and merges them together.</t>
<t tx="vicent.20220906183732.1">## Stash y bisect

Para encontrar bugs que no sabemos cuando se han introducido es muy útil la herramienta `bisect`:

[bisect](https://apiumhub.com/es/tech-blog-barcelona/git-bisect/)
[bisect](https://picodotdev.github.io/blog-bitix/2022/04/como-usar-el-comando-git-bisect-para-descubrir-el-primer-commit-con-un-error/)

Otro comando muy utilizado es `stash`:

[stash](https://www.atlassian.com/es/git/tutorials/saving-changes/git-stash)
</t>
<t tx="vicent.20220910124036.1"></t>
<t tx="vicent.20220910124056.1"># Tema 24 Spring Boot

@path ./24SpringBoot
@language md
@others
</t>
<t tx="vicent.20220910124126.1"># Tema 19 JSF y Primefaces

@path ./19Primefaces
@language md
@others
</t>
<t tx="vicent.20220910124138.1"># Tema 20 Informes con Jasper Reports

@path ./20JasperReports
@language md
@others
</t>
<t tx="vicent.20220910124231.1"># Tema 23 Persistencia de datos con MyBatis

@path ./23PersistenciaConMyBatis
@language md
@others
</t>
<t tx="vicent.20220910124337.1"># Tema 21 Plantillas FreeMarker

@path ./21PlantillasFreeMarker
@language md
@others
</t>
<t tx="vicent.20220910124547.1"># Tema 22 Arquitectura MVC

@path ./22ArquitecturaMVC
@language md
@others
</t>
<t tx="vicent.20220910203232.1">## Crear un proyecto SpringBoot con VSCode

[Referencia](https://code.visualstudio.com/docs/java/java-spring-boot)

Como ejemplo vamos a crear un proyecto web. Como gestor del proyecto usaremos Maven.

```{thumbnail} images/sb_maven.png
```

al seleccionar el tipo de proyecto se inicia un wizard en el que vamos respondiendo preguntas: seleccionamos la versión 
estable más reciente de Maven, Java como lenguaje del proyecto, com.opos como ID del grupo (o sea, nombre del paquete), sbweb como ID del 
artefacto, jar como tipo de empaquetado y la versión de Java más reciente disponible.

Después nos pide que seleccionemos las dependencias del proyecto. Elegimos Spring Web

```{thumbnail} images/sb_dependencias.png
```

Por último nos pregunta en que carpeta vamos a guardar el proyecto.

```{thumbnail} images/sb_project_folder.png
```

Una vez hecho esto ya podemos ver el proyecto en el panel izquierdo del VSCode.

```{thumbnail} images/sb_project_vscode.png
```

El fichero pom.xml resultante contiene toda la información que hemos introducido al crear el proyecto.

Además nos ayuda a entender la diferencia entre groupID y artifactID. Por ejemplo, en la sección de dependencias vemos que un
mismo groupID, org.springframework.boot, cuelgan dos artefactos, spring-boot-starter-web y spring-boot-starter-test. Es una
especie de estructura jerárquica en la que los componentes tienen funciones más específicas a medida que nos alejamos de la raíz.

El starter spring-boot-starter-web contiene los módulos necesarios para el desarrollo de la aplicación web y también un starter Tomcat
para que podamos ejecutar la aplicación sin tener que instalar un Tomcat.

El esqueleto de la aplicación ya está creado y además funciona. Si vamos a la clase anotada con @SpringBootApplication vemos en la
terminal como se ejecuta la aplicación:


      .   ____          _            __ _ _
    /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
    ( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
    \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
      '  |____| .__|_| |_|_| |_\__, | / / / /
    =========|_|==============|___/=/_/_/_/
    :: Spring Boot ::                (v2.7.3)

    2022-09-11 11:31:34.462  INFO 32855 --- [           main] com.opos.sbweb.SbwebApplication          : Starting SbwebApplication using Java 18.0.2.1 on Perseus with PID 32855 (/home/vicent/Programming/Java/GettingStarted/SpringBoot/sbweb/target/classes started by vicent in /home/vicent/Programming/Java/GettingStarted/SpringBoot)
    2022-09-11 11:31:34.465  INFO 32855 --- [           main] com.opos.sbweb.SbwebApplication          : No active profile set, falling back to 1 default profile: "default"
    2022-09-11 11:31:35.217  INFO 32855 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
    2022-09-11 11:31:35.228  INFO 32855 --- [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
    2022-09-11 11:31:35.228  INFO 32855 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.65]
    2022-09-11 11:31:35.318  INFO 32855 --- [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
    2022-09-11 11:31:35.318  INFO 32855 --- [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 812 ms
    2022-09-11 11:31:35.631  INFO 32855 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
    2022-09-11 11:31:35.641  INFO 32855 --- [           main] com.opos.sbweb.SbwebApplication          : Started SbwebApplication in 1.437 seconds (JVM running for 1.699)
    2022-09-11 11:33:57.338  INFO 32855 --- [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
    2022-09-11 11:33:57.338  INFO 32855 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
    2022-09-11 11:33:57.339  INFO 32855 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
</t>
<t tx="vicent.20220911103833.1">## Desarrollo del proyecto

Ahora tenemos un proyecto SpringBoot creado con Maven, así que tiene la misma estructura que todos los proyectos Maven, incluída una
clase principal. Pero la aplicación todavía no hace nada. El siguiente paso es crear el fichero de configuración.
</t>
<t tx="vicent.20220911110903.1">## SpringBoot

En el diccionario boot strapping tiene muchos significados, uno de ellos es: to start up with minimum resources. 

Esa definición parece que se adapta al espíritu de lo que es SpringBoot:

[Referencia muy interesante](https://www.ibm.com/cloud/learn/java-spring-boot)

Java Spring Framework (Spring Framework) is a popular, open source, enterprise-level framework for creating standalone, 
production-grade applications that run on the Java Virtual Machine (JVM).

Java Spring Boot (Spring Boot) is a tool that makes developing web application and microservices with Spring Framework faster and 
easier through three core capabilities:

- Autoconfiguration
- An opinionated approach to configuration
- The ability to create standalone applications

These features work together to provide you with a tool that allows you to set up a Spring-based application with minimal configuration 
and setup.

So the trick with Spring Boot is that many things happen implicitly. For instance, we use the `@SpringBootApplication` annotation, but 
it's a combination of three annotations:

~~~ java
@Configuration
@EnableAutoConfiguration
@ComponentScan
~~~
</t>
<t tx="vicent.20220911120722.1">## Dependency injection and IoC

[Beans y IoC](https://www.baeldung.com/spring-bean)

Spring Framework offers a dependency injection feature that lets objects define their own dependencies that the Spring container later 
injects into them. This process is called Inversion of Control (IoC). This enables developers to create modular applications consisting 
of loosely coupled components that are ideal for microservices and distributed network applications.

Again, Inversion of Control (IoC) is a process in which an object defines its dependencies without creating them. This object 
delegates the job of constructing and managing such dependencies to an IoC container (in our case to an Spring IoC).

*A Spring bean is every object constructed/instantiated and managed by the IoC container. When working with Spring, we can annotate our 
classes in order to make them into Spring beans.*

*The Spring IoC container's management of beans includes several responsibilities. Perhaps the most significant of which include bean 
instantiation/assembly and the management of dependency injections.*

Veamos la IoC con un ejemplo. Usaremos esta clase:

~~~ java
public class Company {
    private Address address;

    public Company(Address address) {
        this.address = address;
    }

    // getter, setter and other properties
}
~~~

Vemos que depende de la clase `Address`:

~~~ java
public class Address {
    private String street;
    private int number;

    public Address(String street, int number) {
        this.street = street;
        this.number = number;
    }

    // getters and setters
}
~~~

En el código la dependencia se maneja de manera explícita invocando un constructor específico para crearla:

~~~ java
Address address = new Address("High Street", 1000);
Company company = new Company(address);
~~~

Pero si hay muchas dependencias, o las dependencias son muy complejas o hay muchos casos de uso, entonces es mejor usar la IoC para la 
gestión de dependencias. Instead of instantiating dependencies by itself, an object can retrieve its dependencies from an IoC container. 
All we need to do is to provide the container with appropriate configuration metadata.

Veamos el ejemplo anterior de nuevo, esta vez usando inyección de dependencias:

~~~ java
@Component
public class Company {
    // this body is the same as before
}
~~~

Este objeto sigue dependiendo de la clase `Address`:

~~~ java
public class Address {
    // this body is the same as before
}
~~~

Pero ahora esta dependencia la gestionamos con un fichero de configuración:

~~~ java
@Configuration
@ComponentScan(basePackageClasses = Company.class)
public class Config {
    @Bean
    public Address getAddress() {
        return new Address("High Street", 1000);
    }
}
~~~

*Las clases con anotaciones que el contenedor IoC sabe como interpretar se llaman beans*.

@Configuration significa que la clase es una clase de configuración que, en este ejemplo, se usa para instanciar beans de tipo 
`Address`.

[@ComponentScan](https://www.baeldung.com/spring-component-scanning) le dice al contenedor IoC que busque beans en la ruta especificada.

Ya tenemos los beans definidos. Ahora necesitamos un IoC container, para instanciar y gestionar los beans. El contenedor IoC se 
crea a partir de la configuración:

~~~ java
ApplicationContext context = new AnnotationConfigApplicationContext(Config.class);
~~~

y comprobamos que todo funciona:

~~~ java
Company company = context.getBean("company", Company.class);
assertEquals("High Street", company.getAddress().getStreet());
assertEquals(1000, company.getAddress().getNumber());
~~~
</t>
</tnodes>
</leo_file>
