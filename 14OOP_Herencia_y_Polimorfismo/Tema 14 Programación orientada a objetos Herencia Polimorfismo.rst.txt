.. rst3: filename: Tema 14 Programación orientada a objetos Herencia Polimorfismo.rst

====================================
Tema 14 OOP: Herencia y Polimorfismo 
====================================

Clases abstractas
+++++++++++++++++

`Abstract class <https://www.baeldung.com/java-abstract-class>`_

Before diving into when to use an abstract class, let's look at their most relevant characteristics:

- We define an abstract class with the `abstract` modifier preceding the `class` keyword
- An abstract class can be subclassed, but it can't be instantiated
- If a class defines one or more abstract methods, then the class itself must be declared abstract
- An abstract class can declare both abstract and concrete methods
- A subclass derived from an abstract class must either implement all the base class's abstract methods or be abstract itself
- abstract methods must have the `abstract` modifier (diferencia con las interfaces)
- methods can be `protected` (diferencia con las interfaces)
- Classes in Java support single inheritance; they can't extend multiple classes.
- Also, note that in the absence of an extends keyword, a class implicitly inherits class java.lang.Object.
- A subclass class inherits the non-static protected and public members from the superclass class. In addition, the 
  members with default (package-private) access are inherited if the two classes are in the same package.
- On the other hand, the private and static members of a class are not inherited.

Notas:

- como las clases pueden ser abstractas o no, necesitamos el modificador `abstract` para distinguir unas de otras
- lo mismo ocurre con los métodos
- los métodos abstractos tienen que tener la firma completa (tipo de retorno, modificadores, parámetros)
- cuando se hereda una clase, para saber que métodos se están heredando hay que tener en cuenta los modificadores de acceso de las 
  clases y de los métodos (por ejemplo ni los métodos estáticos ni los privados se pueden heredar)

Interfaces
++++++++++

`Interfaces <https://www.baeldung.com/java-interfaces>`_

In Java, an interface is an *abstract type* that contains a collection of methods and constant variables.

.. code:: java

  public interface Electronic {
      // Constant variable
      String LED = "LED";

      // Abstract method
      int getElectricityUse();

      // Static method
      static boolean isEnergyEfficient(String electtronicType) {
          if (electtronicType.equals(LED)) {
              return true;
          }
          return false;
      }

      //Default method
      default void printDescription() {
          System.out.println("Electronic Description");
      }
  }


Una interface puede contener:

- nada
- constantes (por definición las variables son `public static final` y esto no puede cambiarse)
- métodos abstractos
- métodos concretos que tengan el modificador `static` o `default`
- los métodos no pueden ser `protected` o `final` pero pueden ser `private` [baeldung](https://www.baeldung.com/java-interface-private-methods)

Las interfaces son tipos abstractos por definición: al crear una interface no necesitamos añadir el modificador 
`abstract`, el compilador lo hace por nosotros. Lo mismo ocurre con los métodos abstractos.

On `default` methods: they are automatically implemented in the class that implements the interface. The most common use of interface 
default methods is to incrementally provide additional functionality to a given type without breaking 
down the implementing classes.

We can implement an interface in a Java class by using the `implements` keyword.

.. code:: java

  public class Computer implements Electronic {

      @Override
      public int getElectricityUse() {
          return 1000;
      }
  }


Con interfaces podemos:

- implementar un determinado comportamiento
- conseguir herencia múltiple (implementando varias interfaces al mismo tiempo)
- conseguir polimorfismo (recordemos que las interfaces *son tipos*)

.. code:: java

  List<Shape> shapes = new ArrayList<>();  // Shape es una interface
  Shape circleShape = new Circle();  // Circle es una clase que implementa Shape
  Shape squareShape = new Square();  // Square es una clase que implementa Shape

  shapes.add(circleShape);
  shapes.add(squareShape);

  for (Shape shape : shapes) {
      System.out.println(shape.name());  // BOOM! Polimorfismo en acción
  }


.. note:: 
  An interface inherits other interfaces by using the keyword *extends*. Classes use the keyword *implements* to
  inherit an interface. 

Notas:

- las interfaces son abstractas por definición, así que no necesitamos usar el modificador `abstract`
- los métodos abstractos no tienen firma ni modificadores, solo valor de retorno y nombre
- todos los métodos de una interface son abstractos, excepto los métodos `static` y los `default`
- los métodos `static` tienen que estar implementados en la interface y funcionan como en las clases, por tanto
  no se pueden sobreescribir
- los métodos `default` tienen que estar implementados en la interface y no se pueden sobreescribir

Clases abstractas vs Interfaces
+++++++++++++++++++++++++++++++

A veces es difícil decidir si usar una clase abstracta o una interface.

Como regla de oro podemos decir que usaremos una clase abstracta cuando hay funcionalidad que queremos heredar. Si lo
que buscamos no es heredar sino implementar una determinada funcionalidad entonces usaremos interfaces.

Por ejemplo:

.. code:: java

  public abstract class BaseFileReader {
      protected Path filePath;
      protected BaseFileReader(Path filePath) {
          this.filePath = filePath;
      }
      
      public Path getFilePath() {
          return filePath;
      }

      public List<String> readFile() throws IOException {
          return Files.lines(filePath)
            .map(this::mapFileLine).collect(Collectors.toList());
      }

      protected abstract String mapFileLine(String line);
  }
  //
  public class LowercaseFileReader extends BaseFileReader {
      public LowercaseFileReader(Path filePath) {
          super(filePath);
      }

      @Override
      public String mapFileLine(String line) {
          return line.toLowerCase();
      }   
  }
  //
  public class UppercaseFileReader extends BaseFileReader {
      public UppercaseFileReader(Path filePath) {
          super(filePath);
      }

      @Override
      public String mapFileLine(String line) {
          return line.toUpperCase();
      }
  }


Vemos como las subclases heredan una determinada funcionalidad (métodos concretos de la clase base) y la extienden con 
su propia implementación de los métodos abstractos.

En cambio con una interface podemos añadir un determinado comportamiento a clases que no están relacionadas entre ellas
(por lo que no heredan unas de otras y no tiene sentido usar clases abstractas). Por ejemplo, la interface
`Comparator` la implementan los tipos `Integer` y `String` (entre otros) y podemos usarla en nuestros propios tipos:

.. code:: java

  public class Employee {

      private double salary;

      public double getSalary() {
          return salary;
      }

      public void setSalary(double salary) {
          this.salary = salary;
      }
  }
  //
  public class EmployeeSalaryComparator implements Comparator<Employee> {

      @Override
      public int compare(Employee employeeA, Employee employeeB) {
          if (employeeA.getSalary() < employeeB.getSalary()) {
              return -1;
          } else if (employeeA.getSalary() > employeeB.getSalary()) { 
              return 1;
          } else {
              return 0;
          }
      }
  }

Herencia de tipos
+++++++++++++++++

`Inheritance <https://www.baeldung.com/java-inheritance>`_

*When a class inherits another class or interfaces, apart from inheriting their members, it also inherits their type. 
This also applies to an interface that inherits other interfaces.*

This is a very powerful concept, which allows developers to program to an interface (base class or interface), rather 
than programming to their implementations.

For example, imagine a condition, where an organization maintains a list of the cars owned by its employees. Of course, 
all employees might own different car models. So how can we refer to different car instances? Here's the solution:

.. code:: java

  public class Employee {
      private String name;
      private Car car;
      
      // standard constructor
  }

Because all derived classes of Car inherit the type Car, the derived class instances can be referred by using a variable of class Car:

.. code:: java

  Employee e1 = new Employee("Shreya", new ArmoredCar());
  Employee e2 = new Employee("Paul", new SpaceCar());
  Employee e3 = new Employee("Pavni", new BMW());

Herencia y composición
+++++++++++++++++++++++

`Inheritance and composition <https://www.baeldung.com/java-inheritance-composition>`_
`Dependency Injection <https://en.wikipedia.org/wiki/Dependency_injection>`_

En general se prefiere la composición (has-a relationship) a la herencia (is-a relationship), pero hay casos típicos de uso donde la 
herencia está recomendada.

La herencia se basa en extender clases. La composición se basa en implementar interfaces.

Usamos herencia con el patrón de capas (layer pattern): la clase base contiene el código común de sus subclases, por ejemplo::

  Empleado
          |
          +-- Informatico
                        |
                        +-- Administrador
                        |
                        +-- Programador

Aquí hemos definido tres capas, y la supercapa de cada subcapa contiene el código común a la supercapa y la subcapa. En cambio las 
subcapas contienen código específico respecto a las supercapas.

También usamos la herencia con el patrón de plantillas (template pattern): la superclase actúa como una plantilla y las subclases 
personalizan esa plantilla sobreescribiendo sus métodos, por ejemplo::

  ComputerBuilder
                |
                +-- StandardComputerBuilder
                |
                +-- GamingComputerBuilder

In a nutshell, composition allows us to model objects that are made up of other objects, thus defining a “has-a” relationship between 
them.

Furthermore, the composition is the strongest form of association, which means that the object(s) that compose or are contained by one 
object are destroyed too when that object is destroyed.

Por ejemplo, un ordenador tiene procesador, memoria y tarjeta de sonido. Si para cada componente creamos una interface, podemos 
construir diferentes modelos de ordenador si usamos diferentes implementaciones de esas intefaces.

.. code:: java

  public class Computer {

      private Processor processor;  // Interface
      private Memory memory;  // Interface
      private SoundCard soundCard;  // Interface

      // standard getters/setters/constructors
      
      public Optional<SoundCard> getSoundCard() {
          return Optional.ofNullable(soundCard);
      }
  }

Con tres implementaciones de cada interface (nueve implementaciones en total) puedo crear 27 modelos de ordenador usando la clase 
`Computer`. Si no uso interfaces tendria que crear nueve clases para los componentes y 27 variantes de la clase `Computer`.

Polimorfismo
++++++++++++

.. code:: java

  public class Animal {
    String name = "animal";
    public String makeNoise {return "generic noise";}
  }

  public class Bird extends Animal {
    String name = "bird";
    public String makeNoise {return "sing";}
  }
  A animal = new Bird();
  A.name --> animal
  A.makeNoise() --> sing

El polimorfismo solo se aplica a métodos de la instancia pero *no* a variables.

