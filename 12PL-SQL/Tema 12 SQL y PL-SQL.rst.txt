.. rst3: filename: Tema 12 SQL y PL-SQL.rst

===========================
Tema 12 Oracle. SQl. PL/SQL
===========================

@path ./12PL-SQL

Introducción
+++++++++++++

`Tutorial <https://www.oracletutorial.com/plsql-tutorial/what-is-plsql/>`_

`Apex workspace gratuito <https://apex.oracle.com>`_

`SQL Workshop Guide <https://docs.oracle.com/en/database/oracle/application-express/21.2/aeutl/>`_

Consulta de datos
+++++++++++++++++

Subqueries
**********

Una subconsulta es una consulta que aparece dentro de otra consulta.

La subconsultas:

- siempre deben escribirse entre paréntesis
- pueden aparecer en casi cualquier parte de la consulta principal (en las cláusulas SELECT, FROM, WHERE y HAVING)
- cuando aparecen en el WHERE o el HAVING la restricción solo se cumple si el resultado de su predicado es verdadero

Atendiendo al número de filas y columnas que devuelven se pueden clasificar en:

- devuelven una celda
- devuelven una tupla con N columnas (N <= número de columnas de la tabla)
- devuelven una tabla MxN (N <= número de columnas de la tabla)

Las subconsultas aparecen en predicados de dos tipos::

  expr operador (subconsulta)
  (expr1, expr2,... exprN) operador (subconsulta)

Las reglas que determinan si un predicado es verdadero o falso son sencillas, pero hay que prestar atención a los
valores especiales NULL y () (o sea, subconsulta que no devuelve nada).
::

  NULL operador_comparacion (subconsulta) *siempre* evalúa a NULL
  (expr1, expr2, ..., exprN) =,<> (subconsulta ) si la subconsulta contiene algún valor NULL entonces el predicado puede tener cualquiera de los valores posibles, depende del caso

El punto más delicado son las subconsultas que no devuelven resultado. En ese caso el resultado depende del tipo de operador. *Un operador 
de comparación siempre devuelve NULL, pero un operador especial siempre devuelve TRUE o FALSE*::

  expr operador_comparación () -> NULL
  (expr1, expr2, ..., exprN) =,<> () -> NULL 
  expr IN () -> FALSE
  (expr1, expr2, ..., exprN) IN () -> FALSE 
  expr ANY () -> FALSE
  (expr1, expr2, ..., exprN) ANY () -> FALSE 
  expr ALL () -> TRUE
  (expr1, expr2, ..., exprN) ALL () -> TRUE 
  EXISTS () -> FALSE

Subconsultas escalares
^^^^^^^^^^^^^^^^^^^^^^

Es el caso más sencillo. La subconsulta devuelve un escalar que se compara con una expresión escalar::

  expr operador (valor)
  NULL operador (valor) -> NULL
  expr operador (NULL) -> NULL
  expr operador () -> NULL

  operador: =, <>, <, >, <=, >=

.. _subconsultas-tuplas-label:

Comparación de tuplas
^^^^^^^^^^^^^^^^^^^^^^

Cuando se comparan tuplas los únicos operadores que se pueden aplicar son =,<>::

  (expr1, expr2, ..., exprN) operador (tupla de N elementos)
  operador: =, <>

O sea, comparar dos tuplas consiste en decir si son iguales o no. Todos los casos son fáciles de evaluar aplicando la lógica::

  (6, 1) = (6, 1) -> true
  (6, 1) <> (6, 1) -> false
  (6, 1) = (6, 2) -> false
  (6, 1) <> (6, 2) -> true
  (6, 1) = (6, NULL) -> NULL
  (6, 1) <> (6, NULL) -> NULL
  (6, 1) = (7, NULL) -> false porque 6 != 7 siempre con independencia de como se comparen los otros valores de la tupla
  (6, 1) <> (7, NULL) -> true
  El resto de casos siempre es NULL (como en las subconsultas escalares):
  (6, 1) = () -> NULL
  (6, 1) <> () -> NULL

Subconsultas que devuelven un conjunto de tuplas
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Estas son las subconsultas más complejas. Utilizan los operadores especiales IN, ANY, ALL y EXISTS.

Todos los operadores (menos EXISTS) admiten dos formas de funcionar: comparación de valores y comparación de filas.
En la comparación de valores se combinan los operadores de comparación con los operadores ANY y ALL (pero no con IN), por ejemplo::
  
  expr >= ANY (subconsulta)
  expr IN (subconsulta)
  EXISTS (subconsulta)

En la comparación de filas se pueden usar los operadores =, <> con ANY y ALL (pero no con IN ni EXISTS)::
  
  (expr1, expr2, ..., exprN) <> ALL (subconsulta)
  (expr1, expr2, ..., exprN) NOT IN (subconsulta)
  EXISTS (subconsulta)

La fila a la izquierda de los operadores se compara con cada fila devuelta por la subconsulta (ver :ref:`subconsultas-tuplas-label`) para ver si son iguales.

Operador IN::

  expr IN (columna) -> TRUE si alguno de los valores de la columna es igual a expr
  (expr1, expr2, ..., exprN) IN (subconsulta) -> TRUE si la subconsulta devuelve alguna fila igual a (expr1, expr2, ..., exprN).

Si la subconsulta devuelve algún valor NULL puede que el predicado evalúe a NULL y la restricción del WHERE o HAVING no se cumpla. Si queremos evitar este comportamiento
podemos aplicar una restricción IS NOT NULL a la subconsulta, por ejemplo::

  select v.codven, v.nombre
  from
  vendedores v
  where v.codven not in ( select f.codven
  from
  facturas f
  where f.codven is not null ) ;

Operador ANY::

  expr ANY (columna) -> TRUE si alguno de los valores de la columna es expr
  (expr1, expr2, ..., exprN) ANY (subconsulta) -> TRUE si la subconsulta devuelve alguna fila igual a (expr1, expr2, ..., exprN).

Operador ALL::

  expr ALL (columna) -> TRUE si todos los valores de la columna son iguales a expr
  (expr1, expr2, ..., exprN) ALL (subconsulta) -> TRUE si todas las filas devueltas por la subconsulta son iguales a (expr1, expr2, ..., exprN).

Operador EXISTS::

  EXISTS (subconsulta) -> TRUE si la subconsulta devuelve un resultado

EXISTS se suele utilizar en subconsultas correlacionadas. Las referencias externas actuaran como constantes durante la evaluación de la subconsulta.
EXISTS no necesita terminar de ejecutar la subconsulta. En cuanto se recupere una fila termina la ejecución y el predicado evalúa  a TRUE. Por eso, para acelerar
la ejecución de la subconsulta suele escribirse una constante en la cláusula SELECT::

  select p.codpue, p.nombre
  from
  pueblos p
  where exists( select '*'
  from
  clientes c
  where c.codpue = p.codpue ) ;

Subconsultas en la cláusula FROM
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

En este caso no se utilizan para construir predicados (al contrario que en WHERE y HAVING) sino para extraer información de otras tablas. El resultado de la 
subconsulta se ve como una tabla más de la que extraer información y usar en la consulta principal.

En los SGBDR que no permiten utilizar funciones de columna  sobre funciones de grupo, como PostgreSQL, estas subconsultas son muy útiles::

  SELECT max(count(*))
  FROM facturas f 
  GROUP BY f.codcli 
  ;

  SELECT max(t.nf)
  FROM (SELECT count(*) nf
  FROM facturas f
  GROUP BY f.codcli) t
  ;

Creación, modificación y borrado de datos
+++++++++++++++++++++++++++++++++++++++++++

Creación de tablas
*******************

La sintaxis de la creación de tablas es un poco farragosa::

  create table nombre_tabla (
  definic_campo1 [, definic_campo2 [, ..., definic_campoN ]...]]
  [, restriccion1 [, restriccion2, ... [ , restriccionM ] ...]]
  );

Vemos que tiene que haber al menos un campo y que todas las restricciones son opcionales.

Los campos se definen obligatoriamente con nombre y tipo de datos. El resto de parámetros son opcionales::

  nom_campo tipo [(dim [,tam])] [null | not null] [default valor]

  municipio varchar(20) NOT NULL default 'Teruel'

La sintaxis para las restricciones es::

  constraint nombre tipo parametros

donde tipo puede ser PRIMARY KEY, UNIQUE, FOREIGN KEY y CHECK::

  primary key (campo1[, campo2, ... ] )

  CONSTRAINT idx_16388_primary PRIMARY KEY (codart)

  unique (campo1[, campo2, ... ] )

  foreign key (campo1[, campo2, ... ] )
  references tabla_referida [(campo1[, campo2, ... ] )]
  on delete [ no action|set null|set default|cascade|restrict
  ]
  on update [ no action|set null|set default|cascade|restrict
  ]

  CONSTRAINT clientes_fk FOREIGN KEY (codpue) REFERENCES facturacion_stock.pueblos(codpue) ON DELETE CASCADE ON UPDATE CASCADE

  check (condicion)

La cláusula ON DELETE define lo que pasa en la tabla actual cuando en la tabla referenciada se intenta borrar una fila cuya clave primaria es la clave
foránea de la tabla actual. Las opciones son:

- no action: no hace nada en la tabla actual y borra la fila en la tabla referenciada
- set null: en la tabla actual pone la clave ajena a NULL en todas las filas en que aparezca y después borra la fila en la tabla referenciada
- set default: en la tabla actual pone la clave ajena a su valor por defecto en todas las filas en que aparezca y después borra la fila en la tabla referenciada
- cascade: en la tabla actual se borran todas las filas en que aparezca la clave ajena y después borra la fila en la tabla referenciada
- restrict: no permite borrar la fila en la tabla referenciada

La cláusula ON UPDATE define lo que pasa en la tabla actual cuando en la tabla referenciada se intenta modificar una clave primaria que es la clave
foránea de la tabla actual. Las opciones son las mismas:

- cascade: en la tabla actual se actualiza en todas las filas en que aparezca la clave ajena al nuevo valor que tendrá la clave primaria y después se modifica la clave primaria en la tabla referenciada
- restrict: no permite modificar la clave primaria en la tabla referenciada

Borrado de tablas
*****************

::

  DROP TABLE nombre_tabla;

Inserción de datos
*******************

::

  INSERT INTO nombre_tabla (campo1, campo2, ..., campoN)
  VALUES (valor1, valor2, ..., valorN)
  ;

Si no se especifican los campos (poco recomendable!), los valores deben tener la posición y tipo de datos correctos. Si se introducen menos valores que campos
hay en la tabla a los valores que falta se les asigna el valor por defecto o NULL.

Si los datos que se desea insertar se pueden obtener de un SELECT se puede usar la siguiente sintaxis::

  insert into pedir_articulos ( fecha, codart, stock )
  select sysdate, codart, stock
  from articulos
  where ( stock < 50 ) and ( precio < 1.0 )
  ;

Modificación de datos
**********************

Cuando no se desea insertar filas completas sino modificar datos existentes::

  update nombre_tabla set columna1 = expr1 [, columna2 = expr2,
  ...]
  [ where condicion ] ;

Por ejemplo::

  update articulos set stock_min = stock / 2 ;

Borrado de datos
****************

::

  delete from nombre_tabla [ where condicion ] ;

Si no ponemos ninguna condición se borraran todos los datos de la tabla (pero no la tabla).

Ejemplo::

  delete from articulos
  where stock = 0 ;

Tópicos avanzados
++++++++++++++++++

Modificar la definición de una tabla
*************************************

Vistas
******

::

  CREATE VIEW nombre_vista AS select_query

Índices
********

Podemos pensar en un índice como en una versión resumida de la tabla a la que va asociado. Esa versión resumida contiene solo las columnas
que aparecen en la definición del índice y una referencia a la fila correspondiente. Las columnas se denominan **claves de búsqueda**.

La característica más importante de los índices, y la que permite optimizar el tiempo de acceso, es que sus filas están ordenadas, lo que 
permite utilizar algoritmos de búsqueda muy eficientes.

La sintaxis para su creación es::

  create [ unique ] [ clustered ] index nombre_indice
  on nombre_tabla ( column-name [ asc | desc ], ...)

A Unique Index is placed on a column to guarantee there will be no duplicate values within that column. Each value in that column is guaranteed to be unique. 

As I said earlier, this type of index is a great way to enforce uniqueness on a non Primary Key column.

A clustered index is a B-Tree data structure that defines the physical storage order of data in a table. The data is ordered according
to something called the clustered index key. The data is physically stored in this order on the hard disk.

PL/SQL
++++++

Datatypes
*********

PL/SQL has two kinds of data types: scalar and composite.

PL/SQL divides the scalar data types into four families:

- Number
- Boolean
- Character
- Datetime

A scalar data type may have subtypes. A subtype is a data type that is a subset of another data type, which is its base type. 

Note that PL/SQL scalar data types include SQL data types and its own data type such as Boolean:

- Boolean: three valued, TRUE, FALSE, NULL
- PLS_INTEGER: uses hardware arithmetic. {NULL, natural numbers}

  - NATURAL: {NULL, enteros no negativos}
  - NATURALN: {enteros no negativos}
  - POSITIVE: {NULL, enteros positivos}
  - POSITIVEN: {enteros positivos}
  - SIGNTYPE: tree valued, {-1, 0, +1}
  - SIMPLE_INTEGER: {natural numbers}
  
- Character data types: CHAR, VARCHAR2, LONG, RAW, LONG RAW, ROWID, and UROWID
- Datetime data types: DATE, TIMESTAMP, TIMESTAMP WITH TIME ZONE, TIMESTAMP WITH LOCAL TIME ZONE, INTERVAL YEAR TO MONTH, 
  and INTERVAL DAY TO SECOND

En general los tipos escalares más utilizados son: number, char, varchar2, boolean y datetime. Ejemplos:

- number(4) entero de cuatro dígitos
- number(10, 2) decimal con 10 dígitos en la parte entera y dos decimales
- char(10) cadena de longitud fija de 10 caracteres
- varchar2(10) cadena de longitud variable de hasta 10 caracteres
- boolean: puede ser TRUE, FALSE o NULL (este tipo no existe en SQL)
- datetime

Estructura del programa
***********************

La unidad básica es el bloque:

.. image:: images/plsql-anonymous-block.png
  :alt: Bloque anónimo
  :align: center

En la sección de declaración se declaran las variables, se reserva memoria para los cursores y se definen tipos de datos personalizados.

En la sección de ejecución (la única obligatoria) se encuentran las sentencias ejecutables del bloque. No puede estar vacía. La
sección ejecutables más sencilla posible es

.. code-block:: sql

  BEGIN
    NULL;
  END;

La sección de gestión de excepciones (opcional) se incluye en el bloque de ejecución. Aquí es donde se capturan y gestionan las 
excepciones lanzadas durante la ejecución del bloque.

.. code-block:: sql

      EXCEPTION 
        WHEN ZERO_DIVIDE THEN
        DBMS_OUTPUT.PUT_LINE(SQLERRM);
        WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Excepción no identificada');

.. tip::
  El bloque de ejecución es el único que termina con END. Las secciones DECLARE y EXCEPTION no lo necesitan porque van en posiciones
  fijas. DECLARE siempre termina inmediatamente antes que BEGIN y EXCEPTION siempre termina inmediatamente antes de END. El resto de construcciones del lenguaje que tienen forma de bloque (estructuras de 
  control, bucles... ) utilizan END + calificativo. De lo contrario no se sabría si estamos cerrando el bloque de ejecución o otra construcción.

Declaración de variables
*************************

Se hace en la sección DECLARE del bloque.

La sintaxis *para la declaración* es:

.. code:: sql

  variable_name [CONSTANT] datatype [NOT NULL] [(:=|DEFAULT) initial_value];

Las variables *siempre* deben tener nombre y tipo de datos. Opcionalmente se pueden añadir las restricciones ``NOT NULL`` (que no 
permite que a la variable se asigne el valor ``NULL``) y ``CONSTANT`` (que no permite que se modifique el valor de la variable).
Para inicializar una variable se utiliza el operador de asignación o la palabra reservada ``DEFAULT``.
Si una variable se va a usar para contener el valor de una columna de una tabla es conveniente anclar el tipo de dato de la columna a 
la variable para evitar errores.

.. code:: sql

  DECLARE
    v_message varchar2(25) NOT NULL := 'Hello world';
    v_result number(10,2) DEFAULT 15.34;
    c_iva CONSTANT number(10,2) NOT NULL := 0.16;
    v_city COUNTRIES.CAPITAL%TYPE;

Las variables pueden ser locales al bloque o globales al programa.

Convenciones útiles en la declaración de variables son:

- distinguir entre variables y constantes con los prefijos ``v_`` y ``c_``
- distinguir las variables que representan un record  (ver :ref:`records-label`) con el prefijo ``r_``
- distinguir entre variables locales y globales con los prefijos ``l_`` y ``g_``

Comentarios
***********

Pueden ser de una línea o multilínea.

.. code:: sql

  BEGIN
    -- single-line comment, another comment
    NULL;
    /* 
        multi-line comment 
        that has another single-line comment 
    */
  END;

.. warning::
  For a PL/SQL block that will be processed dynamically, you cannot use single-line comments. Because Oracle precompiler will ignore 
  the end-of-line characters that cause the single-line comments extend to the end of the block. In this case, you can use multi-line 
  comments instead.

Por eso es recomendable siempre usar comentarios multilínea, especialmente en sesiones interactivas.

Sentencia NULL
**************

The ``NULL`` statement is a ``NULL`` keyword followed by a semicolon ( ;). The ``NULL`` statement does nothing except that it passes 
control to the next statement.

.. code:: sql

  NULL;

The ``NULL`` statement is useful to:

- Improve code readability
- Provide a target for a ``GOTO`` statement
- Create placeholders for subprograms

Control del flujo
*****************

Sentencia IF
^^^^^^^^^^^^

Aquí tenemos un ejemplo completo del uso de la sentencia ``IF``

.. code:: sql

  BEGIN
  ...
    IF v_country != 'Andorra' THEN
        htp.p('El pais no es Andorra!');
    ELSIF v_population > 100000 THEN
        htp.p('La población es superior a 100,000 habitantes');
    ELSE 
        htp.p('Country: ' || v_country || ' Population: ' || v_population || ' Area: ' ||v_area);
    END IF;
  ...
  END;

La condición:

- tiene que ser una expresión booleana (retorna ``TRUE``, ``FALSE`` o ``NULL``) y el bloque correspondiente solo se ejecuta si la condición es
  ``TRUE``
- no va entre paréntesis
- siempre va seguida de la palabra reservada ``THEN``

Los bloques no van encerrados entre llaves. La indentación no es obligatoria pero mejora la legibilidad.

La sentencia termina con ``END IF;``.

La cláusula ``ELSE`` es opcional, si no aparece el compilador no hace nada.

Sentencia CASE
^^^^^^^^^^^^^^

Al igual que ``IF``, es una sentencia para el control del flujo del programa. Tiene dos variantes, la simple y la de búsqueda.

Ejemplo de ``CASE`` simple:

.. code:: sql

  BEGIN
    ...
    CASE v_length
      WHEN 5 THEN
          NULL;
      WHEN 10 THEN
          DBMS_OUTPUT.PUT_LINE('Circle length is 10cm');
      ELSE
          DBMS_OUTPUT.PUT_LINE('Circle length is ' || v_length || 'cm');
    END CASE;
    ...
  END;

Si se cumple la condición se ejecuta el bloque correspondiente y se sale del ``CASE``. No hace falta ningún break como en otros lenguajes
de programación.

.. warning::
  La cláusula ``ELSE`` es opcional, pero si no se utiliza el compilador implícitamente usa

  .. code:: sql

    ELSE 
      RAISE CASE_NOT_FOUND;

Ejemplo del ``CASE`` de búsqueda:

.. code:: sql

  BEGIN
    ...
    CASE
        WHEN v_length < 30 THEN
            htp.p('Short circle!');
        WHEN v_length > 300 THEN
            htp.p('Large circle');
        ELSE
            RAISE CASE_NOT_FOUND;
    END CASE;
    ...
  END;

As a rule of thumb, use a searched ``CASE`` statement when you want to execute a sequence of statements based on the results of multiple 
Boolean expressions and use a simple ``CASE`` statement when you want to execute a sequence of statements based on the result of a single 
expression.

Bucles
******

LOOP
^^^^

Es el bucle más sencillo. La sintaxis es:

.. code:: sql

  <<loop_label>> LOOP
    statements;
  END LOOP loop_label;

La etiqueta es opcional, pero hace el código más legible cuando usamos bucles anidados. The ``LOOP`` statement executes the statements
in its body and returns control to the top of the loop. Typically, the body of the loop contains at least one ``EXIT`` or 
``EXIT WHEN`` statement for terminating the loop. Otherwise, the loop becomes an infinite loop.

.. code::

  BEGIN
    ...
    LOOP
        v_jcounter := 0;
        <<inner_loop>>
        LOOP
            DBMS_OUTPUT.PUT_LINE('Inside loop at element (i= ' || v_icounter || ', j= ' || v_jcounter || ') ');
            v_jcounter := v_jcounter + 1;
            EXIT inner_loop WHEN v_jcounter > 3;
        END LOOP;
        v_icounter := v_icounter + 1;
        EXIT WHEN v_icounter > 4;
    END LOOP;
    ...
  END;

FOR LOOP
^^^^^^^^

El bucle ``FOR LOOP`` es un poco peculiar si lo comparamos con la sentencia análoga en otros lenguajes de programación.
Su sintaxis es:

.. code::

  FOR index IN [REVERSE] lower_bound .. upper_bound
  LOOP
    statements;
  END LOOP;

El contador es una variable implícita, local para el bucle y no se puede acceder a él desde fuera del bucle. El valor del contador
no se puede cambiar, *solo se incrementa en pasos de uno*.

``lower_bound`` y ``upper_bound`` solo se evalúan una vez, al inicio del bucle. Sus valores se almacenan como valores temporales de
tipo ``PLS_INTEGER``. *Cualquier cambio de su valor dentro del bucle no tiene efecto alguno*.

.. code::

  BEGIN
    ...
    FOR l_index IN REVERSE 1..5
    LOOP
        DBMS_OUTPUT.PUT_LINE('index: ' || l_index);
    END LOOP;
    ...
  END;

WHILE LOOP
^^^^^^^^^^

Su sintaxis es:

.. code::sql

  WHILE condition
  LOOP
      statements;
  END LOOP;

El funcionamiento de este bucle es el típico. Aquí tenemos un ejemplo:

.. code::

  BEGIN
    ...
    WHILE v_icounter > 0
    LOOP
        v_icounter := v_icounter - 1;
        CONTINUE WHEN v_icounter = 2;
        EXIT WHEN v_icounter = 1;
        DBMS_OUTPUT.PUT_LINE('Counter is greater than 0: ' || v_icounter);
    END LOOP;
    ...
  END;

En el ejemplo se utiliza la sentencia ``CONTINUE`` para volver al principio del bucle e iniciar una nueva iteración y tambien se usa
``EXIT WHEN``. Ambas sentencias se pueden usar en cualquier tipo de bucles.

SELECT INTO
***********

PL/SQL ``SELECT INTO`` statement is the simplest and fastest way to fetch a single row from a table into variables. The following 
illustrates the syntax of the ``SELECT INTO`` statement:

.. code:: SQL

  SELECT
    select_list
  INTO
    variable_list
  FROM
    table_name
  WHERE
    condition; 

In this syntax, the number of columns in the `variable_list` must be the same as the number of variables (or the number of components of a record) in the `select_list`.  
In addition, their corresponding data type must be compatible.

Besides the WHERE clause, you can use other clauses in the SELECT statement such as INNER JOIN, GROUP BY, HAVING, and UNION.

If the SELECT statement returns more than one row, Oracle will raise the TOO_MANY_ROWS exception. If the SELECT statement does not return any row, Oracle will raise 
the NO_DATA_FOUND exception.

Ejemplo:

.. code:: SQL

  DECLARE
  l_customer_name customers.name%TYPE;
  l_contact_first_name contacts.first_name%TYPE;
  l_contact_last_name contacts.last_name%TYPE;
  BEGIN
    -- get customer and contact names
    SELECT
      name, 
      first_name, 
      last_name
    INTO
      l_customer_name, 
      l_contact_first_name, 
      l_contact_last_name
    FROM
      customers
    INNER JOIN contacts USING( customer_id )
    WHERE
      customer_id = 100;
    -- show the information  
    dbms_output.put_line( 
      l_customer_name || ', Contact Person: ' ||
      l_contact_first_name || ' ' || l_contact_last_name );
  END;

El error más común con esta sentencia es que el número de variables en el bloque ``INTO`` no coincida con el número de columnas recuperadas
por el ``SELECT`` o que los tipos de datos de las variables no coincidan con los de las columnas.

.. _records-label:

Cursores
********

Un cursor es un puntero que apunta al resultado de un query.

El ciclo de vida de un cursor se representa como:

.. image:: images/plsql-cursor.png
  :alt: Ciclo de vida de un cursor externo
  :align: center

Hay de dos tipos: implícitos y explícitos. Cada vez que se ejecuta una query, Oracle crea automáticamente un cursor implícito, gestiona su ciclo de vida y permite acceso
solamente a información sobre el estado del cursor, pero sin dar acceso al propio cursor.

Los cursores explícitos los crea explícitamente el programador y gestiona su ciclo de vida.
La sintaxis para las diferentes etapas del ciclo de vida es:

.. code:: sql

  DECLARE
    CURSOR c_name IS query
  
  BEGIN
    OPEN c_name
    ...
    FETCH c_name INTO variables_list;
    ...
    CLOSE c_name
    ...
  END;

En la declaración se crea el cursor, con OPEN se ejecuta la query y coloca el cursor apuntando a la primera fila del resultado, con FETCH INTO se recuperan las filas devueltas por la query una por
una y con CLOSE se cierra el cursor y se libera la memoria que tenía reservada. Los cursores creados en un bloque anónimo, en una función
o en un procedimiento no hace falta cerrarlos explícitamente.

Records
*******

Un record es una estructura de datos formada por varios campos, cada uno con un valor. Lo podemos representar como

.. image:: images/plsql-record.png
  :alt: Un record está compuesto por varios campos
  :align: center

... que se parece mucho a una fila de una tabla. Los records nos permiten pasar de operar a nivel de campo a operar a nivel de 
conjunto de campos.

Hay tres tipos de record: basados en tabla, basados en cursor y definidos por el programador.

La declaración de un record basado en tabla es:

.. code:: sql

  DECLARE
   rtb_name table_name%ROWTYPE;

Aquí el record representa una fila de la tabla. Si no necesitamos la fila completa, sino solo un grupo de campos, usamos un record basado en cursor. Primero declaramos el cursor
de manera explícita y luego declaramos el record:

.. code:: sql

  DECLARE
    CURSOR c_contacts IS
        SELECT first_name, last_name, phone
        FROM contacts;
    r_contact c_contacts%ROWTYPE;

Si necesitamos un record que no esté basado en una estructura de datos existente tenemos que declarar nuestra propia estructura de datos
de *tipo record* y después declarar el record:

.. code:: sql

  TYPE record_type IS RECORD (
    field_name1 data_type1 [[NOT NULL] := | DEFAULT default_value],
    field_name2 data_type2 [[NOT NULL] := | DEFAULT default_value],
    ...
  );
  record_name record_type;

Con los records podemos hacer las siguientes operaciones:

- referenciar un campo del record

  .. code:: sql

    r_name.campo

- asignar campos individuales

  .. code:: sql

    r_contact.first_name := 'John';

- asignar un record a otro del mismo tipo

  .. code:: sql

    r_name1 := r_name2

- no se pueden comparar records entre sí. Hay que comparar los campos uno a uno.

- asignar un record completo o campos individuales con ``SELECT INTO``

  .. code:: sql

    SELECT
    first_name, last_name, phone
    INTO
      r_contact
    FROM
      contacts
    WHERE
      contact_id = 100;

- cuando usamos cursores en lugar de tablas el equivalente a ``SELECT INTO`` es ``FETCH INTO``

  .. code:: sql

    -- fetch a whole record
    FETCH cur_contacts INTO r_contact;

    -- fetch individual fields
    FETCH
      cur_contacts
    INTO
      r_contact.first_name, 
      r_contact.last_name, 
      r_contact.phone;

- hacer INSERT/UPDATE
- anidar records

Ejemplo completo:

.. code:: sql

  DECLARE
    /* Table-based record */
    rtb_countries EBA_COUNTRIES%ROWTYPE;

    /* Cursor-based record: first create the cursor, then declare the record */
    CURSOR c_countries IS
        SELECT name, nationality, capital, population
        FROM EBA_COUNTRIES;
    r_countries c_countries%ROWTYPE;

    /* Cursor with parameters based record: first create the cursor, then declare the record */
    CURSOR pc_countries(pais EBA_COUNTRIES.name%TYPE := 'Andorra') IS
        SELECT name, nationality, capital, population
        FROM EBA_COUNTRIES
        WHERE name < pais;
    pr_countries pc_countries%ROWTYPE;

    /* Programmer-defined record: TO BE DONE */
  BEGIN
      /* Fill the table-based record */
      SELECT * INTO rtb_countries
      FROM EBA_COUNTRIES
      WHERE capital LIKE 'Paris';
      
      /* Fill the cursor-based record with the first retrieved row */
      OPEN c_countries;
      FETCH c_countries INTO r_countries;
      htp.p('Country: ' || r_countries.name);

      /* Fill the cursor-based record with the next retrieved row. This time we specify the record fields */
      FETCH c_countries INTO
      r_countries.name,
      r_countries.nationality,
      r_countries.capital,
      r_countries.population;
      htp.p('Country: ' || r_countries.name);    
      CLOSE c_countries;

      /* Iterate over the whole cursor with a FOR LOOP. No need to open/fetch/close the cursor */
      FOR record IN c_countries
      LOOP
          htp.p(c_countries%ROWCOUNT || ' Country: ' || record.name);
          EXIT WHEN record.name = 'Argentina';
      END LOOP;

      /* Iterate over the whole cursor with parameters with a FOR LOOP. No need to open/fetch/close the cursor */
      FOR record IN pc_countries('Belgium')
      LOOP
          htp.p(pc_countries%ROWCOUNT || ' Country: ' || record.name);
          EXIT WHEN record.name = 'Argentina';
      END LOOP;

      EXCEPTION WHEN OTHERS THEN
      htp.p(SQLERRM);
  END;

Procedimientos
**************

Funciones
*********

